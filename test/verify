#!/bin/bash

# raises error
raise() {
  echo "ERROR: $@" >&2
  exit 1
}


init() {
  for n in $(seq 1 3); do
    printf "."
    sleep 0.5
  done
  printf "\n\n"
}


test_count=0
test_succ=0
launch_test() {

  # compiling with tested compiler
  ../../ifj < "$1/$1.bas" > "$1/$1_compiled.code" 2> "$1/$1_translate.stderr"
  if [ "$?" != "0" ]; then
    echo "[ERROR]"
    cat "$1/$1_translate.stderr"
    return
  fi

  # interpreting compiled result
  ../ic17int "$1/$1_compiled.code" < "$1/$1.stdin" > "$1/$1_compiled.stdout" 2> "$1/$1_compiled.stderr"
  if [ "$?" != "0" ]; then
    echo "[ERROR]"
    cat "$1/$1_compiled.stderr"
    return
  fi

  # interpreting right result
  ../ic17int "$1/$1.code" < "$1/$1.stdin" > "$1/$1.stdout" 2> "$1/$1.stderr"
  if [ "$?" != "0" ]; then
    echo "[ERROR]"
    cat  "$1/$1.stderr"
    return
  fi

  # advanced method of compare
  if [ "$(diff $1/$1.stdout $1/$1_compiled.stdout)" = "" ]; then
    if [ "$(diff $1/$1.stderr $1/$1_compiled.stderr)" = "" ]; then
      test_succ=$((test_succ+1))
      echo "[OK]"
      return
    fi
  fi

  # error
  echo "[ERROR]"
  diff "$1/$1.stdout" "$1/$1_compiled.stdout"
}

lextest_count=0
lextest_succ=0
launch_lextest() {

  # compiling with tested compiler
  ../../ifj < "$1/$1.bas" > "$1/$1_compiled.code" 2> "$1/$1_translate.stderr"
  if [ "$?" != "0" ]; then
    echo "[ERROR]"
    sleep 2
    cat "$1/$1_translate.stderr"
    return
  fi

  # interpreting compiled result
  ../ic17int "$1/$1_compiled.code" < "$1/$1.stdin" > "$1/$1_compiled.stdout" 2> "$1/$1_compiled.stderr"
  if [ "$?" != "0" ]; then
    echo "[ERROR]"
    sleep 2
    cat "$1/$1_compiled.stderr"
    return
  fi

  # interpreting right result
  ../ic17int "$1/$1.code" < "$1/$1.stdin" > "$1/$1.stdout" 2> "$1/$1.stderr"
  if [ "$?" != "0" ]; then
    echo "[ERROR]"
    sleep 2
    cat  "$1/$1.stderr"
    return
  fi

  # advanced method of compare
  if [ "$(diff $1/$1.stdout $1/$1_compiled.stdout)" = "" ]; then
    if [ "$(diff $1/$1.stderr $1/$1_compiled.stderr)" = "" ]; then
      lextest_succ=$((lextest_succ+1))
      echo "[OK]"
      return
    fi
  fi

  # error
  echo "[ERROR]"
  sleep 2
  diff "$1/$1.stdout" "$1/$1_compiled.stdout"
}


run_all_tests()
{
  cd ..
  echo "======= Cleaning with Makefile ======="
  make clean -s
  echo "======= Building with Makefile ======="
  make -s -j5
  sleep 1
  clear
  cd test/

  # general tests
  cd general/
  echo "=========== GENERAL TESTS ============"
  sleep 1
  for t in $(find * -type d); do
    test_count=$((test_count+1))

    printf "TEST $test_count: "
    printf "$t "

    launch_test "$t"

    sleep 0.2
  done
  sleep 0.5

  echo "======================================"
  echo "DONE."
  sleep 0.5
  echo "$test_succ / $test_count successful."

  # lexical tests
  cd ../lex
  echo "=========== LEXICAL TESTS ============"
  for t in $(find * -type d 2> /dev/null); do
    test_count=$((lextest_count+1))

    printf "TEST $test_count: "
    printf "$t "

    launch_test "$t"

    sleep 2
  done

  sleep 0.5
  echo "======================================"
  echo "DONE."
  sleep 0.5
  echo "$lextest_succ / $lextest_count successful."
}


# begin
printf "Testing is being initialized"
init

# running tests
run_all_tests
