#!/bin/bash

# raises error
raise() {
  echo "ERROR: $@" >&2
  exit 1
}


init() {
  for n in $(seq 1 3); do
    printf "."
    sleep 0.5
  done
  printf "\n\n"
}


test_count=0
test_succ=0
launch_test() {

  # compiling with tested compiler
  ../../ifj < "$1/$1.bas" > "$1/$1_compiled.code" 2> "$1/$1_translate.stderr"
  if [ "$?" != "0" ]; then
    echo "[ERROR]"
    cat "$1/$1_translate.stderr"
    return
  fi

  # interpreting compiled result
  ../ic17int "$1/$1_compiled.code" < "$1/$1.stdin" > "$1/$1_compiled.stdout" 2> "$1/$1_compiled.stderr"
  if [ "$?" != "0" ]; then
    echo "[ERROR]"
    cat "$1/$1_compiled.stderr"
    return
  fi

  # interpreting right result
  ../ic17int "$1/$1.code" < "$1/$1.stdin" > "$1/$1.stdout" 2> "$1/$1.stderr"
  if [ "$?" != "0" ]; then
    echo "[ERROR]"
    cat  "$1/$1.stderr"
    return
  fi

  # advanced method of compare
  if [ "$(diff $1/$1.stdout $1/$1_compiled.stdout)" = "" ]; then
    if [ "$(diff $1/$1.stderr $1/$1_compiled.stderr)" = "" ]; then
      test_succ=$((test_succ+1))
      echo "[OK]"
      return
    fi
  fi

  # error
  echo "[ERROR]"
  diff "$1/$1.stdout" "$1/$1_compiled.stdout"
}

print_error() {
  if [ "$1" = "0" ]; then
    printf "0 (OK)"
  elif [ "$1" = "1" ]; then
    printf "1 (lex)"
  elif [ "$1" = "2" ]; then
    printf "2 (syntax)"
  elif [ "$1" = "3" ]; then
    printf "3 (semantic1 - definitions)"
  elif [ "$1" = "4" ]; then
    printf "4 (semantic2 - types)"
  elif [ "$1" = "6" ]; then
    printf "6 (semantic3 - others)"
  elif [ "$1" = "99" ]; then
    printf "99 (intenal)"
  else
    printf "UNKNOWN TYPE OF ERROR"
  fi
}
errtest_count=0
errtest_succ=0
launch_errtest() {

  # compiling with tested compiler
  ../../ifj < "$1/$1.bas" > /dev/null 2> /dev/null
  code="$?"
  if [ "$code" != "$(head -n 1 $1/$1.errcode)" ]; then
    echo "[ERROR]"
    printf "Given "
    print_error "$code"
    printf ", but correct is "
    print_error "$(head -n 1 $1/$1.errcode)"
    echo ""
    sleep 2
    return
  fi

  echo "[OK]"
  errtest_succ=$(($errtest_succ+1))
  return
}


run_all_tests()
{
  cd ..
  echo "======= Cleaning with Makefile ======="
  make clean -s
  echo "======= Building with Makefile ======="
  make -s -j5
  sleep 1
  clear
  cd test/

  # general tests
  cd general/
  echo "=========== GENERAL TESTS ============"
  sleep 1
  for t in $(find * -type d); do
    test_count=$((test_count+1))

    printf "TEST $test_count: "
    printf "$t "

    launch_test "$t"

    sleep 0.2
  done

  echo "======================================"
  echo "DONE."
  sleep 0.5
  echo "$test_succ / $test_count successful."
  sleep 2
  echo ""
  echo ""

  # error tests
  cd ..
  cd error
  echo "=========== ERROR TESTS ============"
  for t in $(find * -type d 2> /dev/null); do
    errtest_count=$((errtest_count+1))

    printf "TEST $errtest_count: "
    printf "$t "

    launch_errtest "$t"

    sleep 0.2
  done

  echo "======================================"
  echo "DONE."
  sleep 0.5
  echo "$errtest_succ / $errtest_count successful."
  sleep 2
}


# begin
printf "Testing is being initialized"
init

# running tests
run_all_tests

echo ""
echo ""
echo "Testing ended"
echo "*--------------------------*"
echo "|       tests: $test_succ/$test_count"
echo "| error tests: $errtest_succ/$errtest_count"
echo "*--------------------------*"
