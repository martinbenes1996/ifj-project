# 2017-12-04 00:15:03.832293
# SECTION: 97_optimizations
# TEST: 01
# INFO: constant expression evaluating
# REQUIRED EXTENSIONS: 
# ACTIVATED EXTENSIONS: BASE, UNARY
# STATE: FAIL
# 
# COMPILER STDERR:
# 
# INTERPRETER STDERR:
# Executing instruction: ICREATEFRAME at line: 8 with following arguments:
# Executing instruction: IPUSHFRAME at line: 9 with following arguments:
# Executing instruction: IDEFVAR at line: 10 with following arguments:
# Dest: LF@*tmp
# Executing instruction: IDEFVAR at line: 11 with following arguments:
# Dest: LF@*foo
# Executing instruction: IDEFVAR at line: 12 with following arguments:
# Dest: LF@*bar
# Executing instruction: IJUMP at line: 13 with following arguments:
# Executing instruction: ILABEL at line: 15 with following arguments:
# Executing instruction: IDEFVAR at line: 16 with following arguments:
# Dest: LF@counter
# Executing instruction: IPUSHS at line: 17 with following arguments:
# Arg1: Const@=50(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 18 with following arguments:
# Arg1: Stack@=50(int)
# Dest: LF@counter()
# Executing instruction: ILABEL at line: 19 with following arguments:
# Executing instruction: IPUSHS at line: 20 with following arguments:
# Arg1: LF@counter=50(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 21 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 22 with following arguments:
# Arg1: Stack@=50(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 23 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 24 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 25 with following arguments:
# Arg1: Const@=10.2(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 26 with following arguments:
# Arg1: Const@=98(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 27 with following arguments:
# Arg1: Stack@=98(int)
# Dest: Stack@()
# Executing instruction: IDIVS at line: 28 with following arguments:
# Arg1: Stack@=10.2(double)
# Arg2: Stack@=98(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 29 with following arguments:
# Arg1: Const@=12(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 30 with following arguments:
# Arg1: Stack@=12(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 31 with following arguments:
# Arg1: Const@=3(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 32 with following arguments:
# Arg1: Stack@=3(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 33 with following arguments:
# Arg1: Const@=6.85(double)
# Dest: Stack@()
# Executing instruction: IMULTS at line: 34 with following arguments:
# Arg1: Stack@=3(double)
# Arg2: Stack@=6.85(double)
# Dest: Stack@()
# Executing instruction: IDIVS at line: 35 with following arguments:
# Arg1: Stack@=12(double)
# Arg2: Stack@=20.55(double)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 36 with following arguments:
# Arg1: Stack@=0.5839416058394161(double)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 37 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IADDS at line: 38 with following arguments:
# Arg1: Stack@=0.1040816326530612(double)
# Arg2: Stack@=1(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 39 with following arguments:
# Arg1: Const@=14(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 40 with following arguments:
# Arg1: Stack@=14(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 41 with following arguments:
# Arg1: Stack@=1.104081632653061(double)
# Arg2: Stack@=14(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 42 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 43 with following arguments:
# Arg1: Const@=5(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 44 with following arguments:
# Arg1: Stack@=0(int)
# Arg2: Stack@=5(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 45 with following arguments:
# Arg1: Stack@=-5(int)
# Dest: Stack@()
# Executing instruction: IDIVS at line: 46 with following arguments:
# Arg1: Stack@=-12.89591836734694(double)
# Arg2: Stack@=-5(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 47 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 48 with following arguments:
# Arg1: Const@=9(int)
# Dest: Stack@()
# Executing instruction: IADDS at line: 49 with following arguments:
# Arg1: Stack@=0(int)
# Arg2: Stack@=9(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 50 with following arguments:
# Arg1: Const@=8(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 51 with following arguments:
# Arg1: Stack@=9(int)
# Arg2: Stack@=8(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 52 with following arguments:
# Arg1: Const@=12(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 53 with following arguments:
# Arg1: Stack@=12(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 54 with following arguments:
# Arg1: Const@=17.21(double)
# Dest: Stack@()
# Executing instruction: IADDS at line: 55 with following arguments:
# Arg1: Stack@=12(double)
# Arg2: Stack@=17.21(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 56 with following arguments:
# Arg1: Const@=10.8(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 57 with following arguments:
# Arg1: Const@=7(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 58 with following arguments:
# Arg1: Stack@=7(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 59 with following arguments:
# Arg1: Stack@=10.8(double)
# Arg2: Stack@=7(double)
# Dest: Stack@()
# Executing instruction: IDIVS at line: 60 with following arguments:
# Arg1: Stack@=29.21(double)
# Arg2: Stack@=3.800000000000001(double)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 61 with following arguments:
# Arg1: Stack@=7.686842105263157(double)
# Dest: Stack@()
# Executing instruction: IMULTS at line: 62 with following arguments:
# Arg1: Stack@=1(int)
# Arg2: Stack@=8(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 63 with following arguments:
# Arg1: Stack@=8(int)
# Dest: Stack@()
# Executing instruction: IADDS at line: 64 with following arguments:
# Arg1: Stack@=2.579183673469388(double)
# Arg2: Stack@=8(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 65 with following arguments:
# Arg1: Stack@=10.57918367346939(double)
# Dest: LF@*tmp()
# Executing instruction: IWRITE at line: 66 with following arguments:
# Arg1: LF@*tmp=10.57918367346939(double)
# Executing instruction: IPUSHS at line: 67 with following arguments:
# Arg1: LF@counter=50(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 68 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 69 with following arguments:
# Arg1: Stack@=50(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 70 with following arguments:
# Arg1: Stack@=49(int)
# Dest: LF@counter=50(int)
# Executing instruction: IDEFVAR at line: 71 with following arguments:
# Dest: LF@*baaaaa
# Executing instruction: IMOVE at line: 72 with following arguments:
# Arg1: Const@=(string)
# Dest: LF@*baaaaa()
# Executing instruction: ICONCAT at line: 73 with following arguments:
# Arg1: LF@*baaaaa=(string)
# Arg2: Const@=
# (string)
# Dest: LF@*baaaaa=(string)
# Executing instruction: IPUSHS at line: 74 with following arguments:
# Arg1: LF@*baaaaa=
# (string)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 75 with following arguments:
# Arg1: Stack@=
# (string)
# Dest: LF@*tmp=10.57918367346939(double)
# Executing instruction: IWRITE at line: 76 with following arguments:
# Arg1: LF@*tmp=
# (string)
# Executing instruction: IJUMP at line: 77 with following arguments:
# Executing instruction: ILABEL at line: 19 with following arguments:
# Executing instruction: IPUSHS at line: 20 with following arguments:
# Arg1: LF@counter=49(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 21 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 22 with following arguments:
# Arg1: Stack@=49(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 23 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 24 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 25 with following arguments:
# Arg1: Const@=10.2(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 26 with following arguments:
# Arg1: Const@=98(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 27 with following arguments:
# Arg1: Stack@=98(int)
# Dest: Stack@()
# Executing instruction: IDIVS at line: 28 with following arguments:
# Arg1: Stack@=10.2(double)
# Arg2: Stack@=98(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 29 with following arguments:
# Arg1: Const@=12(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 30 with following arguments:
# Arg1: Stack@=12(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 31 with following arguments:
# Arg1: Const@=3(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 32 with following arguments:
# Arg1: Stack@=3(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 33 with following arguments:
# Arg1: Const@=6.85(double)
# Dest: Stack@()
# Executing instruction: IMULTS at line: 34 with following arguments:
# Arg1: Stack@=3(double)
# Arg2: Stack@=6.85(double)
# Dest: Stack@()
# Executing instruction: IDIVS at line: 35 with following arguments:
# Arg1: Stack@=12(double)
# Arg2: Stack@=20.55(double)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 36 with following arguments:
# Arg1: Stack@=0.5839416058394161(double)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 37 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IADDS at line: 38 with following arguments:
# Arg1: Stack@=0.1040816326530612(double)
# Arg2: Stack@=1(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 39 with following arguments:
# Arg1: Const@=14(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 40 with following arguments:
# Arg1: Stack@=14(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 41 with following arguments:
# Arg1: Stack@=1.104081632653061(double)
# Arg2: Stack@=14(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 42 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 43 with following arguments:
# Arg1: Const@=5(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 44 with following arguments:
# Arg1: Stack@=0(int)
# Arg2: Stack@=5(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 45 with following arguments:
# Arg1: Stack@=-5(int)
# Dest: Stack@()
# Executing instruction: IDIVS at line: 46 with following arguments:
# Arg1: Stack@=-12.89591836734694(double)
# Arg2: Stack@=-5(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 47 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 48 with following arguments:
# Arg1: Const@=9(int)
# Dest: Stack@()
# Executing instruction: IADDS at line: 49 with following arguments:
# Arg1: Stack@=0(int)
# Arg2: Stack@=9(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 50 with following arguments:
# Arg1: Const@=8(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 51 with following arguments:
# Arg1: Stack@=9(int)
# Arg2: Stack@=8(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 52 with following arguments:
# Arg1: Const@=12(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 53 with following arguments:
# Arg1: Stack@=12(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 54 with following arguments:
# Arg1: Const@=17.21(double)
# Dest: Stack@()
# Executing instruction: IADDS at line: 55 with following arguments:
# Arg1: Stack@=12(double)
# Arg2: Stack@=17.21(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 56 with following arguments:
# Arg1: Const@=10.8(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 57 with following arguments:
# Arg1: Const@=7(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 58 with following arguments:
# Arg1: Stack@=7(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 59 with following arguments:
# Arg1: Stack@=10.8(double)
# Arg2: Stack@=7(double)
# Dest: Stack@()
# Executing instruction: IDIVS at line: 60 with following arguments:
# Arg1: Stack@=29.21(double)
# Arg2: Stack@=3.800000000000001(double)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 61 with following arguments:
# Arg1: Stack@=7.686842105263157(double)
# Dest: Stack@()
# Executing instruction: IMULTS at line: 62 with following arguments:
# Arg1: Stack@=1(int)
# Arg2: Stack@=8(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 63 with following arguments:
# Arg1: Stack@=8(int)
# Dest: Stack@()
# Executing instruction: IADDS at line: 64 with following arguments:
# Arg1: Stack@=2.579183673469388(double)
# Arg2: Stack@=8(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 65 with following arguments:
# Arg1: Stack@=10.57918367346939(double)
# Dest: LF@*tmp=
# (string)
# Executing instruction: IWRITE at line: 66 with following arguments:
# Arg1: LF@*tmp=10.57918367346939(double)
# Executing instruction: IPUSHS at line: 67 with following arguments:
# Arg1: LF@counter=49(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 68 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 69 with following arguments:
# Arg1: Stack@=49(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 70 with following arguments:
# Arg1: Stack@=48(int)
# Dest: LF@counter=49(int)
# Executing instruction: IDEFVAR at line: 71 with following arguments:
# Dest: LF@*baaaaa
# Error at line: 71
# Symbol already exists!
# 
# STDOUT DIFF:
# --- expected
# +++ actual
# @@ -1,50 +1,2 @@

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# - 9.77918

# + 10.5792

# + 10.5792

# INTERPRETER STDIN: 
# 
#
# EXPECTED COMPILER EXIT CODE: 0
# CURRENT COMPILER EXIT CODE: 0
# EXPECTED INTERPRETER EXIT CODE: 0
# CURRENT INTERPRETER EXIT CODE: 52
# PRICE: ---
# GROOT: ---
# 
#   1: ' constant expression evaluating
#   2: 
#   3: scope
#   4: 	dim counter as integer = 50
#   5: 
#   6: 	do while counter > 0
#   7: 		print (10.2 / 98 + (12 \ 3 * 6.85) - 14) / (0 - 5) + (0 + 9 - 8) * ((12+17.21)\(10.8 - 7));
#   8: 		counter = counter - 1
#   9: 		print !"\n";
#  10: 	loop
#  11: 
#  12: end scope

########################################

# Generated code                                                                #     2/80
# IFJ                                                                           #     3/80
# xbenes49 xbolsh00 xpolan09                                                    #     4/80
# 2017                                                                          #     5/80
.IFJcode17                                                                      #     7/80
CREATEFRAME                                                                     #     8/80
PUSHFRAME                                                                       #     9/80
DEFVAR LF@*tmp                                                                  #    10/80
DEFVAR LF@*foo                                                                  #    11/80
DEFVAR LF@*bar                                                                  #    12/80
JUMP $main                                                                      #    13/80
LABEL $main                                                                     #    15/80
DEFVAR LF@counter                                                               #    16/80
PUSHS int@50                                                                    #    17/80
POPS LF@counter                                                                 #    18/80
LABEL $aaaaaa                                                                   #    19/80
PUSHS LF@counter                                                                #    20/80
PUSHS int@0                                                                     #    21/80
GTS                                                                             #    22/80
PUSHS bool@true                                                                 #    23/80
JUMPIFNEQS $baaaaa                                                              #    24/80
PUSHS float@10.2                                                                #    25/80
PUSHS int@98                                                                    #    26/80
INT2FLOATS                                                                      #    27/80
DIVS                                                                            #    28/80
PUSHS int@12                                                                    #    29/80
INT2FLOATS                                                                      #    30/80
PUSHS int@3                                                                     #    31/80
INT2FLOATS                                                                      #    32/80
PUSHS float@6.85                                                                #    33/80
MULS                                                                            #    34/80
DIVS                                                                            #    35/80
FLOAT2R2EINTS                                                                   #    36/80
INT2FLOATS                                                                      #    37/80
ADDS                                                                            #    38/80
PUSHS int@14                                                                    #    39/80
INT2FLOATS                                                                      #    40/80
SUBS                                                                            #    41/80
PUSHS int@0                                                                     #    42/80
PUSHS int@5                                                                     #    43/80
SUBS                                                                            #    44/80
INT2FLOATS                                                                      #    45/80
DIVS                                                                            #    46/80
PUSHS int@0                                                                     #    47/80
PUSHS int@9                                                                     #    48/80
ADDS                                                                            #    49/80
PUSHS int@8                                                                     #    50/80
SUBS                                                                            #    51/80
PUSHS int@12                                                                    #    52/80
INT2FLOATS                                                                      #    53/80
PUSHS float@17.21                                                               #    54/80
ADDS                                                                            #    55/80
PUSHS float@10.8                                                                #    56/80
PUSHS int@7                                                                     #    57/80
INT2FLOATS                                                                      #    58/80
SUBS                                                                            #    59/80
DIVS                                                                            #    60/80
FLOAT2R2EINTS                                                                   #    61/80
MULS                                                                            #    62/80
INT2FLOATS                                                                      #    63/80
ADDS                                                                            #    64/80
POPS LF@*tmp                                                                    #    65/80
WRITE LF@*tmp                                                                   #    66/80
PUSHS LF@counter                                                                #    67/80
PUSHS int@1                                                                     #    68/80
SUBS                                                                            #    69/80
POPS LF@counter                                                                 #    70/80
DEFVAR LF@*baaaaa                                                               #    71/80
MOVE LF@*baaaaa string@                                                         #    72/80
CONCAT LF@*baaaaa LF@*baaaaa string@\010                                        #    73/80
PUSHS LF@*baaaaa                                                                #    74/80
POPS LF@*tmp                                                                    #    75/80
WRITE LF@*tmp                                                                   #    76/80
JUMP $aaaaaa                                                                    #    77/80
LABEL $baaaaa                                                                   #    78/80
JUMP $end                                                                       #    79/80
LABEL $end                                                                      #    80/80

