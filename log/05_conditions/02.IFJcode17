# 2017-12-04 00:15:00.743200
# SECTION: 05_conditions
# TEST: 02
# INFO: if recursion
# REQUIRED EXTENSIONS: 
# ACTIVATED EXTENSIONS: BASE, UNARY
# STATE: SUCCESS
# 
# COMPILER STDERR:
# 
# INTERPRETER STDERR:
# Executing instruction: ICREATEFRAME at line: 8 with following arguments:
# Executing instruction: IPUSHFRAME at line: 9 with following arguments:
# Executing instruction: IDEFVAR at line: 10 with following arguments:
# Dest: LF@*tmp
# Executing instruction: IDEFVAR at line: 11 with following arguments:
# Dest: LF@*foo
# Executing instruction: IDEFVAR at line: 12 with following arguments:
# Dest: LF@*bar
# Executing instruction: IJUMP at line: 13 with following arguments:
# Executing instruction: ILABEL at line: 15 with following arguments:
# Executing instruction: IPUSHS at line: 16 with following arguments:
# Arg1: Const@=8(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 17 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 18 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 19 with following arguments:
# Arg1: Stack@=0(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: ILSS at line: 20 with following arguments:
# Arg1: Stack@=8(int)
# Arg2: Stack@=-1(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 21 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFEQS at line: 22 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 23 with following arguments:
# Arg1: Const@=75(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 24 with following arguments:
# Arg1: Const@=8(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 25 with following arguments:
# Arg1: Stack@=75(int)
# Arg2: Stack@=8(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 26 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 27 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 28 with following arguments:
# Arg1: Const@=42(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 29 with following arguments:
# Arg1: Stack@=42(int)
# Dest: LF@*tmp()
# Executing instruction: IWRITE at line: 30 with following arguments:
# Arg1: LF@*tmp=42(int)
# Executing instruction: IJUMP at line: 31 with following arguments:
# Executing instruction: ILABEL at line: 33 with following arguments:
# Executing instruction: IJUMP at line: 34 with following arguments:
# Executing instruction: ILABEL at line: 49 with following arguments:
# Executing instruction: IJUMP at line: 50 with following arguments:
# Executing instruction: ILABEL at line: 51 with following arguments:
# Executing instruction: IGROOT at line: 53 with following arguments:
# I am Groot at 53 (111).
# 
# STDOUT DIFF:
# 

# INTERPRETER STDIN: 
# 
#
# EXPECTED COMPILER EXIT CODE: 0
# CURRENT COMPILER EXIT CODE: 0
# EXPECTED INTERPRETER EXIT CODE: 0
# CURRENT INTERPRETER EXIT CODE: 0
# PRICE: 111 (39+72)
# GROOT: 111
# 
#   1: ' if recursion
#   2: scope
#   3: 	if 8 >= (0 - 1) then
#   4: 		if 75 > 8 then
#   5: 			print 42;
#   6: 		else
#   7: 
#   8: 		end if
#   9: 	else
#  10: 		if 8 > (5 - 12) then
#  11: 			print 58;
#  12: 		else
#  13: 
#  14: 		end if
#  15: 	end if
#  16: end scope

########################################

# Generated code                                                                #     2/51
# IFJ                                                                           #     3/51
# xbenes49 xbolsh00 xpolan09                                                    #     4/51
# 2017                                                                          #     5/51
.IFJcode17                                                                      #     7/51
CREATEFRAME                                                                     #     8/51
PUSHFRAME                                                                       #     9/51
DEFVAR LF@*tmp                                                                  #    10/51
DEFVAR LF@*foo                                                                  #    11/51
DEFVAR LF@*bar                                                                  #    12/51
JUMP $main                                                                      #    13/51
LABEL $main                                                                     #    15/51
PUSHS int@8                                                                     #    16/51
PUSHS int@0                                                                     #    17/51
PUSHS int@1                                                                     #    18/51
SUBS                                                                            #    19/51
LTS                                                                             #    20/51
PUSHS bool@true                                                                 #    21/51
JUMPIFEQS $aaaaaa                                                               #    22/51
PUSHS int@75                                                                    #    23/51
PUSHS int@8                                                                     #    24/51
GTS                                                                             #    25/51
PUSHS bool@true                                                                 #    26/51
JUMPIFNEQS $baaaaa                                                              #    27/51
PUSHS int@42                                                                    #    28/51
POPS LF@*tmp                                                                    #    29/51
WRITE LF@*tmp                                                                   #    30/51
JUMP $caaaaa                                                                    #    31/51
LABEL $baaaaa                                                                   #    32/51
LABEL $caaaaa                                                                   #    33/51
JUMP $daaaaa                                                                    #    34/51
LABEL $aaaaaa                                                                   #    35/51
PUSHS int@8                                                                     #    36/51
PUSHS int@5                                                                     #    37/51
PUSHS int@12                                                                    #    38/51
SUBS                                                                            #    39/51
GTS                                                                             #    40/51
PUSHS bool@true                                                                 #    41/51
JUMPIFNEQS $eaaaaa                                                              #    42/51
PUSHS int@58                                                                    #    43/51
POPS LF@*tmp                                                                    #    44/51
WRITE LF@*tmp                                                                   #    45/51
JUMP $faaaaa                                                                    #    46/51
LABEL $eaaaaa                                                                   #    47/51
LABEL $faaaaa                                                                   #    48/51
LABEL $daaaaa                                                                   #    49/51
JUMP $end                                                                       #    50/51
LABEL $end                                                                      #    51/51

