# 2017-12-04 00:15:00.815381
# SECTION: 05_conditions
# TEST: 13
# INFO: Compare equal input strings
# REQUIRED EXTENSIONS: 
# ACTIVATED EXTENSIONS: BASE, UNARY
# STATE: SUCCESS
# 
# COMPILER STDERR:
# 
# INTERPRETER STDERR:
# Executing instruction: ICREATEFRAME at line: 8 with following arguments:
# Executing instruction: IPUSHFRAME at line: 9 with following arguments:
# Executing instruction: IDEFVAR at line: 10 with following arguments:
# Dest: LF@*tmp
# Executing instruction: IDEFVAR at line: 11 with following arguments:
# Dest: LF@*foo
# Executing instruction: IDEFVAR at line: 12 with following arguments:
# Dest: LF@*bar
# Executing instruction: IJUMP at line: 13 with following arguments:
# Executing instruction: ILABEL at line: 15 with following arguments:
# Executing instruction: IDEFVAR at line: 16 with following arguments:
# Dest: LF@a
# Executing instruction: IDEFVAR at line: 17 with following arguments:
# Dest: LF@*baaaaa
# Executing instruction: IMOVE at line: 18 with following arguments:
# Arg1: Const@=(string)
# Dest: LF@*baaaaa()
# Executing instruction: ICONCAT at line: 19 with following arguments:
# Arg1: LF@*baaaaa=(string)
# Arg2: Const@=(string)
# Dest: LF@*baaaaa=(string)
# Executing instruction: IPUSHS at line: 20 with following arguments:
# Arg1: LF@*baaaaa=(string)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 21 with following arguments:
# Arg1: Stack@=(string)
# Dest: LF@a()
# Executing instruction: IDEFVAR at line: 22 with following arguments:
# Dest: LF@b
# Executing instruction: IDEFVAR at line: 23 with following arguments:
# Dest: LF@*caaaaa
# Executing instruction: IMOVE at line: 24 with following arguments:
# Arg1: Const@=(string)
# Dest: LF@*caaaaa()
# Executing instruction: ICONCAT at line: 25 with following arguments:
# Arg1: LF@*caaaaa=(string)
# Arg2: Const@=(string)
# Dest: LF@*caaaaa=(string)
# Executing instruction: IPUSHS at line: 26 with following arguments:
# Arg1: LF@*caaaaa=(string)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 27 with following arguments:
# Arg1: Stack@=(string)
# Dest: LF@b()
# Executing instruction: IWRITE at line: 28 with following arguments:
# Arg1: Const@=? (string)
# Executing instruction: IREAD at line: 29 with following arguments:
# Dest: LF@a=(string)
# Executing instruction: IWRITE at line: 30 with following arguments:
# Arg1: Const@=? (string)
# Executing instruction: IREAD at line: 31 with following arguments:
# Dest: LF@b=(string)
# Executing instruction: IDEFVAR at line: 32 with following arguments:
# Dest: LF@*daaaaa
# Executing instruction: IMOVE at line: 33 with following arguments:
# Arg1: Const@=(string)
# Dest: LF@*daaaaa()
# Executing instruction: ICONCAT at line: 34 with following arguments:
# Arg1: LF@*daaaaa=(string)
# Arg2: LF@a=Ahojky(string)
# Dest: LF@*daaaaa=(string)
# Executing instruction: IPUSHS at line: 35 with following arguments:
# Arg1: LF@*daaaaa=Ahojky(string)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 36 with following arguments:
# Dest: LF@*eaaaaa
# Executing instruction: IMOVE at line: 37 with following arguments:
# Arg1: Const@=(string)
# Dest: LF@*eaaaaa()
# Executing instruction: ICONCAT at line: 38 with following arguments:
# Arg1: LF@*eaaaaa=(string)
# Arg2: LF@b=Ahojky(string)
# Dest: LF@*eaaaaa=(string)
# Executing instruction: IPUSHS at line: 39 with following arguments:
# Arg1: LF@*eaaaaa=Ahojky(string)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 40 with following arguments:
# Arg1: Stack@=Ahojky(string)
# Arg2: Stack@=Ahojky(string)
# Executing instruction: IPUSHS at line: 41 with following arguments:
# Arg1: Const@=42(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 42 with following arguments:
# Arg1: Stack@=42(int)
# Dest: LF@*tmp()
# Executing instruction: IWRITE at line: 43 with following arguments:
# Arg1: LF@*tmp=42(int)
# Executing instruction: IJUMP at line: 44 with following arguments:
# Executing instruction: ILABEL at line: 49 with following arguments:
# Executing instruction: IJUMP at line: 50 with following arguments:
# Executing instruction: ILABEL at line: 51 with following arguments:
# Executing instruction: IGROOT at line: 53 with following arguments:
# I am Groot at 53 (229).
# 
# STDOUT DIFF:
# 

# INTERPRETER STDIN: 
# Ahojky
# Ahojky
#
# EXPECTED COMPILER EXIT CODE: 0
# CURRENT COMPILER EXIT CODE: 0
# EXPECTED INTERPRETER EXIT CODE: 0
# CURRENT INTERPRETER EXIT CODE: 0
# PRICE: 229 (68+161)
# GROOT: 229
# 
#   1: ' Compare equal input strings
#   2: scope
#   3: 
#   4: 	dim a as string
#   5: 	dim b as string
#   6: 	input a
#   7: 	input b
#   8: 	if a = b then
#   9: 		print 42;
#  10: 	else
#  11: 		print 43;	
#  12: 	end if
#  13: end scope

########################################

# Generated code                                                                #     2/51
# IFJ                                                                           #     3/51
# xbenes49 xbolsh00 xpolan09                                                    #     4/51
# 2017                                                                          #     5/51
.IFJcode17                                                                      #     7/51
CREATEFRAME                                                                     #     8/51
PUSHFRAME                                                                       #     9/51
DEFVAR LF@*tmp                                                                  #    10/51
DEFVAR LF@*foo                                                                  #    11/51
DEFVAR LF@*bar                                                                  #    12/51
JUMP $main                                                                      #    13/51
LABEL $main                                                                     #    15/51
DEFVAR LF@a                                                                     #    16/51
DEFVAR LF@*baaaaa                                                               #    17/51
MOVE LF@*baaaaa string@                                                         #    18/51
CONCAT LF@*baaaaa LF@*baaaaa string@                                            #    19/51
PUSHS LF@*baaaaa                                                                #    20/51
POPS LF@a                                                                       #    21/51
DEFVAR LF@b                                                                     #    22/51
DEFVAR LF@*caaaaa                                                               #    23/51
MOVE LF@*caaaaa string@                                                         #    24/51
CONCAT LF@*caaaaa LF@*caaaaa string@                                            #    25/51
PUSHS LF@*caaaaa                                                                #    26/51
POPS LF@b                                                                       #    27/51
WRITE string@?\032                                                              #    28/51
READ LF@a string                                                                #    29/51
WRITE string@?\032                                                              #    30/51
READ LF@b string                                                                #    31/51
DEFVAR LF@*daaaaa                                                               #    32/51
MOVE LF@*daaaaa string@                                                         #    33/51
CONCAT LF@*daaaaa LF@*daaaaa LF@a                                               #    34/51
PUSHS LF@*daaaaa                                                                #    35/51
DEFVAR LF@*eaaaaa                                                               #    36/51
MOVE LF@*eaaaaa string@                                                         #    37/51
CONCAT LF@*eaaaaa LF@*eaaaaa LF@b                                               #    38/51
PUSHS LF@*eaaaaa                                                                #    39/51
JUMPIFNEQS $aaaaaa                                                              #    40/51
PUSHS int@42                                                                    #    41/51
POPS LF@*tmp                                                                    #    42/51
WRITE LF@*tmp                                                                   #    43/51
JUMP $baaaaa                                                                    #    44/51
LABEL $aaaaaa                                                                   #    45/51
PUSHS int@43                                                                    #    46/51
POPS LF@*tmp                                                                    #    47/51
WRITE LF@*tmp                                                                   #    48/51
LABEL $baaaaa                                                                   #    49/51
JUMP $end                                                                       #    50/51
LABEL $end                                                                      #    51/51

