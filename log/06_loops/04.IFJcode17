# 2017-12-04 00:15:00.947665
# SECTION: 06_loops
# TEST: 04
# INFO: nested and mutliple while loop
# REQUIRED EXTENSIONS: 
# ACTIVATED EXTENSIONS: BASE, UNARY
# STATE: SUCCESS
# 
# COMPILER STDERR:
# 
# INTERPRETER STDERR:
# Executing instruction: ICREATEFRAME at line: 8 with following arguments:
# Executing instruction: IPUSHFRAME at line: 9 with following arguments:
# Executing instruction: IDEFVAR at line: 10 with following arguments:
# Dest: LF@*tmp
# Executing instruction: IDEFVAR at line: 11 with following arguments:
# Dest: LF@*foo
# Executing instruction: IDEFVAR at line: 12 with following arguments:
# Dest: LF@*bar
# Executing instruction: IJUMP at line: 13 with following arguments:
# Executing instruction: ILABEL at line: 15 with following arguments:
# Executing instruction: IDEFVAR at line: 16 with following arguments:
# Dest: LF@a
# Executing instruction: IPUSHS at line: 17 with following arguments:
# Arg1: Const@=0(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 18 with following arguments:
# Arg1: Stack@=0(double)
# Dest: LF@a()
# Executing instruction: IDEFVAR at line: 19 with following arguments:
# Dest: LF@b
# Executing instruction: IPUSHS at line: 20 with following arguments:
# Arg1: Const@=0(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 21 with following arguments:
# Arg1: Stack@=0(double)
# Dest: LF@b()
# Executing instruction: IPUSHS at line: 22 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 23 with following arguments:
# Arg1: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 24 with following arguments:
# Arg1: Const@=123.789(double)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 25 with following arguments:
# Arg1: Stack@=0(double)
# Arg2: Stack@=123.789(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 26 with following arguments:
# Arg1: Stack@=-123.789(double)
# Dest: LF@a=0(double)
# Executing instruction: ILABEL at line: 27 with following arguments:
# Executing instruction: IPUSHS at line: 28 with following arguments:
# Arg1: LF@a=-123.789(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 29 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 30 with following arguments:
# Arg1: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 31 with following arguments:
# Arg1: Const@=236.741(double)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 32 with following arguments:
# Arg1: Stack@=0(double)
# Arg2: Stack@=236.741(double)
# Dest: Stack@()
# Executing instruction: IGTS at line: 33 with following arguments:
# Arg1: Stack@=-123.789(double)
# Arg2: Stack@=-236.741(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 34 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 35 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 36 with following arguments:
# Arg1: Const@=9(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 37 with following arguments:
# Arg1: Stack@=9(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 38 with following arguments:
# Arg1: Stack@=9(double)
# Dest: LF@b=0(double)
# Executing instruction: ILABEL at line: 39 with following arguments:
# Executing instruction: IPUSHS at line: 40 with following arguments:
# Arg1: LF@b=9(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 41 with following arguments:
# Arg1: Const@=3.02(double)
# Dest: Stack@()
# Executing instruction: IGTS at line: 42 with following arguments:
# Arg1: Stack@=9(double)
# Arg2: Stack@=3.02(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 43 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 44 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 45 with following arguments:
# Arg1: Const@=63(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 46 with following arguments:
# Arg1: Stack@=63(int)
# Dest: LF@*tmp()
# Executing instruction: IWRITE at line: 47 with following arguments:
# Arg1: LF@*tmp=63(int)
# Executing instruction: IPUSHS at line: 48 with following arguments:
# Arg1: LF@b=9(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 49 with following arguments:
# Arg1: Const@=1.123(double)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 50 with following arguments:
# Arg1: Stack@=9(double)
# Arg2: Stack@=1.123(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 51 with following arguments:
# Arg1: Stack@=7.877(double)
# Dest: LF@b=9(double)
# Executing instruction: IJUMP at line: 52 with following arguments:
# Executing instruction: ILABEL at line: 39 with following arguments:
# Executing instruction: IPUSHS at line: 40 with following arguments:
# Arg1: LF@b=7.877(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 41 with following arguments:
# Arg1: Const@=3.02(double)
# Dest: Stack@()
# Executing instruction: IGTS at line: 42 with following arguments:
# Arg1: Stack@=7.877(double)
# Arg2: Stack@=3.02(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 43 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 44 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 45 with following arguments:
# Arg1: Const@=63(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 46 with following arguments:
# Arg1: Stack@=63(int)
# Dest: LF@*tmp=63(int)
# Executing instruction: IWRITE at line: 47 with following arguments:
# Arg1: LF@*tmp=63(int)
# Executing instruction: IPUSHS at line: 48 with following arguments:
# Arg1: LF@b=7.877(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 49 with following arguments:
# Arg1: Const@=1.123(double)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 50 with following arguments:
# Arg1: Stack@=7.877(double)
# Arg2: Stack@=1.123(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 51 with following arguments:
# Arg1: Stack@=6.754(double)
# Dest: LF@b=7.877(double)
# Executing instruction: IJUMP at line: 52 with following arguments:
# Executing instruction: ILABEL at line: 39 with following arguments:
# Executing instruction: IPUSHS at line: 40 with following arguments:
# Arg1: LF@b=6.754(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 41 with following arguments:
# Arg1: Const@=3.02(double)
# Dest: Stack@()
# Executing instruction: IGTS at line: 42 with following arguments:
# Arg1: Stack@=6.754(double)
# Arg2: Stack@=3.02(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 43 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 44 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 45 with following arguments:
# Arg1: Const@=63(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 46 with following arguments:
# Arg1: Stack@=63(int)
# Dest: LF@*tmp=63(int)
# Executing instruction: IWRITE at line: 47 with following arguments:
# Arg1: LF@*tmp=63(int)
# Executing instruction: IPUSHS at line: 48 with following arguments:
# Arg1: LF@b=6.754(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 49 with following arguments:
# Arg1: Const@=1.123(double)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 50 with following arguments:
# Arg1: Stack@=6.754(double)
# Arg2: Stack@=1.123(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 51 with following arguments:
# Arg1: Stack@=5.630999999999999(double)
# Dest: LF@b=6.754(double)
# Executing instruction: IJUMP at line: 52 with following arguments:
# Executing instruction: ILABEL at line: 39 with following arguments:
# Executing instruction: IPUSHS at line: 40 with following arguments:
# Arg1: LF@b=5.630999999999999(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 41 with following arguments:
# Arg1: Const@=3.02(double)
# Dest: Stack@()
# Executing instruction: IGTS at line: 42 with following arguments:
# Arg1: Stack@=5.630999999999999(double)
# Arg2: Stack@=3.02(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 43 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 44 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 45 with following arguments:
# Arg1: Const@=63(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 46 with following arguments:
# Arg1: Stack@=63(int)
# Dest: LF@*tmp=63(int)
# Executing instruction: IWRITE at line: 47 with following arguments:
# Arg1: LF@*tmp=63(int)
# Executing instruction: IPUSHS at line: 48 with following arguments:
# Arg1: LF@b=5.630999999999999(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 49 with following arguments:
# Arg1: Const@=1.123(double)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 50 with following arguments:
# Arg1: Stack@=5.630999999999999(double)
# Arg2: Stack@=1.123(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 51 with following arguments:
# Arg1: Stack@=4.507999999999999(double)
# Dest: LF@b=5.630999999999999(double)
# Executing instruction: IJUMP at line: 52 with following arguments:
# Executing instruction: ILABEL at line: 39 with following arguments:
# Executing instruction: IPUSHS at line: 40 with following arguments:
# Arg1: LF@b=4.507999999999999(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 41 with following arguments:
# Arg1: Const@=3.02(double)
# Dest: Stack@()
# Executing instruction: IGTS at line: 42 with following arguments:
# Arg1: Stack@=4.507999999999999(double)
# Arg2: Stack@=3.02(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 43 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 44 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 45 with following arguments:
# Arg1: Const@=63(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 46 with following arguments:
# Arg1: Stack@=63(int)
# Dest: LF@*tmp=63(int)
# Executing instruction: IWRITE at line: 47 with following arguments:
# Arg1: LF@*tmp=63(int)
# Executing instruction: IPUSHS at line: 48 with following arguments:
# Arg1: LF@b=4.507999999999999(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 49 with following arguments:
# Arg1: Const@=1.123(double)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 50 with following arguments:
# Arg1: Stack@=4.507999999999999(double)
# Arg2: Stack@=1.123(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 51 with following arguments:
# Arg1: Stack@=3.384999999999999(double)
# Dest: LF@b=4.507999999999999(double)
# Executing instruction: IJUMP at line: 52 with following arguments:
# Executing instruction: ILABEL at line: 39 with following arguments:
# Executing instruction: IPUSHS at line: 40 with following arguments:
# Arg1: LF@b=3.384999999999999(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 41 with following arguments:
# Arg1: Const@=3.02(double)
# Dest: Stack@()
# Executing instruction: IGTS at line: 42 with following arguments:
# Arg1: Stack@=3.384999999999999(double)
# Arg2: Stack@=3.02(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 43 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 44 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 45 with following arguments:
# Arg1: Const@=63(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 46 with following arguments:
# Arg1: Stack@=63(int)
# Dest: LF@*tmp=63(int)
# Executing instruction: IWRITE at line: 47 with following arguments:
# Arg1: LF@*tmp=63(int)
# Executing instruction: IPUSHS at line: 48 with following arguments:
# Arg1: LF@b=3.384999999999999(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 49 with following arguments:
# Arg1: Const@=1.123(double)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 50 with following arguments:
# Arg1: Stack@=3.384999999999999(double)
# Arg2: Stack@=1.123(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 51 with following arguments:
# Arg1: Stack@=2.261999999999999(double)
# Dest: LF@b=3.384999999999999(double)
# Executing instruction: IJUMP at line: 52 with following arguments:
# Executing instruction: ILABEL at line: 39 with following arguments:
# Executing instruction: IPUSHS at line: 40 with following arguments:
# Arg1: LF@b=2.261999999999999(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 41 with following arguments:
# Arg1: Const@=3.02(double)
# Dest: Stack@()
# Executing instruction: IGTS at line: 42 with following arguments:
# Arg1: Stack@=2.261999999999999(double)
# Arg2: Stack@=3.02(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 43 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 44 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 53 with following arguments:
# Executing instruction: IPUSHS at line: 54 with following arguments:
# Arg1: LF@a=-123.789(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 55 with following arguments:
# Arg1: LF@a=-123.789(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 56 with following arguments:
# Arg1: Const@=2(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 57 with following arguments:
# Arg1: Stack@=2(int)
# Dest: Stack@()
# Executing instruction: IMULTS at line: 58 with following arguments:
# Arg1: Stack@=-123.789(double)
# Arg2: Stack@=2(double)
# Dest: Stack@()
# Executing instruction: IADDS at line: 59 with following arguments:
# Arg1: Stack@=-123.789(double)
# Arg2: Stack@=-247.578(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 60 with following arguments:
# Arg1: Stack@=-371.367(double)
# Dest: LF@a=-123.789(double)
# Executing instruction: IJUMP at line: 61 with following arguments:
# Executing instruction: ILABEL at line: 27 with following arguments:
# Executing instruction: IPUSHS at line: 28 with following arguments:
# Arg1: LF@a=-371.367(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 29 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 30 with following arguments:
# Arg1: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 31 with following arguments:
# Arg1: Const@=236.741(double)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 32 with following arguments:
# Arg1: Stack@=0(double)
# Arg2: Stack@=236.741(double)
# Dest: Stack@()
# Executing instruction: IGTS at line: 33 with following arguments:
# Arg1: Stack@=-371.367(double)
# Arg2: Stack@=-236.741(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 34 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 35 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 62 with following arguments:
# Executing instruction: IPUSHS at line: 63 with following arguments:
# Arg1: Const@=78(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 64 with following arguments:
# Arg1: Stack@=78(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 65 with following arguments:
# Arg1: Stack@=78(double)
# Dest: LF@a=-371.367(double)
# Executing instruction: ILABEL at line: 66 with following arguments:
# Executing instruction: IPUSHS at line: 67 with following arguments:
# Arg1: LF@a=78(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 68 with following arguments:
# Arg1: Const@=55(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 69 with following arguments:
# Arg1: Stack@=55(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 70 with following arguments:
# Arg1: Stack@=78(double)
# Arg2: Stack@=55(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 71 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 72 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 73 with following arguments:
# Arg1: Const@=57(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 74 with following arguments:
# Arg1: Stack@=57(int)
# Dest: LF@*tmp=63(int)
# Executing instruction: IWRITE at line: 75 with following arguments:
# Arg1: LF@*tmp=57(int)
# Executing instruction: IPUSHS at line: 76 with following arguments:
# Arg1: LF@a=78(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 77 with following arguments:
# Arg1: Const@=5.38(double)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 78 with following arguments:
# Arg1: Stack@=78(double)
# Arg2: Stack@=5.38(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 79 with following arguments:
# Arg1: Stack@=72.62(double)
# Dest: LF@a=78(double)
# Executing instruction: IJUMP at line: 80 with following arguments:
# Executing instruction: ILABEL at line: 66 with following arguments:
# Executing instruction: IPUSHS at line: 67 with following arguments:
# Arg1: LF@a=72.62(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 68 with following arguments:
# Arg1: Const@=55(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 69 with following arguments:
# Arg1: Stack@=55(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 70 with following arguments:
# Arg1: Stack@=72.62(double)
# Arg2: Stack@=55(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 71 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 72 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 73 with following arguments:
# Arg1: Const@=57(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 74 with following arguments:
# Arg1: Stack@=57(int)
# Dest: LF@*tmp=57(int)
# Executing instruction: IWRITE at line: 75 with following arguments:
# Arg1: LF@*tmp=57(int)
# Executing instruction: IPUSHS at line: 76 with following arguments:
# Arg1: LF@a=72.62(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 77 with following arguments:
# Arg1: Const@=5.38(double)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 78 with following arguments:
# Arg1: Stack@=72.62(double)
# Arg2: Stack@=5.38(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 79 with following arguments:
# Arg1: Stack@=67.24000000000001(double)
# Dest: LF@a=72.62(double)
# Executing instruction: IJUMP at line: 80 with following arguments:
# Executing instruction: ILABEL at line: 66 with following arguments:
# Executing instruction: IPUSHS at line: 67 with following arguments:
# Arg1: LF@a=67.24000000000001(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 68 with following arguments:
# Arg1: Const@=55(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 69 with following arguments:
# Arg1: Stack@=55(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 70 with following arguments:
# Arg1: Stack@=67.24000000000001(double)
# Arg2: Stack@=55(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 71 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 72 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 73 with following arguments:
# Arg1: Const@=57(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 74 with following arguments:
# Arg1: Stack@=57(int)
# Dest: LF@*tmp=57(int)
# Executing instruction: IWRITE at line: 75 with following arguments:
# Arg1: LF@*tmp=57(int)
# Executing instruction: IPUSHS at line: 76 with following arguments:
# Arg1: LF@a=67.24000000000001(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 77 with following arguments:
# Arg1: Const@=5.38(double)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 78 with following arguments:
# Arg1: Stack@=67.24000000000001(double)
# Arg2: Stack@=5.38(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 79 with following arguments:
# Arg1: Stack@=61.86000000000001(double)
# Dest: LF@a=67.24000000000001(double)
# Executing instruction: IJUMP at line: 80 with following arguments:
# Executing instruction: ILABEL at line: 66 with following arguments:
# Executing instruction: IPUSHS at line: 67 with following arguments:
# Arg1: LF@a=61.86000000000001(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 68 with following arguments:
# Arg1: Const@=55(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 69 with following arguments:
# Arg1: Stack@=55(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 70 with following arguments:
# Arg1: Stack@=61.86000000000001(double)
# Arg2: Stack@=55(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 71 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 72 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 73 with following arguments:
# Arg1: Const@=57(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 74 with following arguments:
# Arg1: Stack@=57(int)
# Dest: LF@*tmp=57(int)
# Executing instruction: IWRITE at line: 75 with following arguments:
# Arg1: LF@*tmp=57(int)
# Executing instruction: IPUSHS at line: 76 with following arguments:
# Arg1: LF@a=61.86000000000001(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 77 with following arguments:
# Arg1: Const@=5.38(double)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 78 with following arguments:
# Arg1: Stack@=61.86000000000001(double)
# Arg2: Stack@=5.38(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 79 with following arguments:
# Arg1: Stack@=56.48(double)
# Dest: LF@a=61.86000000000001(double)
# Executing instruction: IJUMP at line: 80 with following arguments:
# Executing instruction: ILABEL at line: 66 with following arguments:
# Executing instruction: IPUSHS at line: 67 with following arguments:
# Arg1: LF@a=56.48(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 68 with following arguments:
# Arg1: Const@=55(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 69 with following arguments:
# Arg1: Stack@=55(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 70 with following arguments:
# Arg1: Stack@=56.48(double)
# Arg2: Stack@=55(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 71 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 72 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 73 with following arguments:
# Arg1: Const@=57(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 74 with following arguments:
# Arg1: Stack@=57(int)
# Dest: LF@*tmp=57(int)
# Executing instruction: IWRITE at line: 75 with following arguments:
# Arg1: LF@*tmp=57(int)
# Executing instruction: IPUSHS at line: 76 with following arguments:
# Arg1: LF@a=56.48(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 77 with following arguments:
# Arg1: Const@=5.38(double)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 78 with following arguments:
# Arg1: Stack@=56.48(double)
# Arg2: Stack@=5.38(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 79 with following arguments:
# Arg1: Stack@=51.1(double)
# Dest: LF@a=56.48(double)
# Executing instruction: IJUMP at line: 80 with following arguments:
# Executing instruction: ILABEL at line: 66 with following arguments:
# Executing instruction: IPUSHS at line: 67 with following arguments:
# Arg1: LF@a=51.1(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 68 with following arguments:
# Arg1: Const@=55(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 69 with following arguments:
# Arg1: Stack@=55(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 70 with following arguments:
# Arg1: Stack@=51.1(double)
# Arg2: Stack@=55(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 71 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 72 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 81 with following arguments:
# Executing instruction: IJUMP at line: 82 with following arguments:
# Executing instruction: ILABEL at line: 83 with following arguments:
# Executing instruction: IGROOT at line: 85 with following arguments:
# I am Groot at 85 (1195).
# 
# STDOUT DIFF:
# 

# INTERPRETER STDIN: 
# 
#
# EXPECTED COMPILER EXIT CODE: 0
# CURRENT COMPILER EXIT CODE: 0
# EXPECTED INTERPRETER EXIT CODE: 0
# CURRENT INTERPRETER EXIT CODE: 0
# PRICE: 1195 (318+877)
# GROOT: 1195
# 
#   1: ' nested and mutliple while loop
#   2: scope
#   3: 	dim a as double
#   4: 	dim b as double
#   5: 	a = 0 - 123.789
#   6: 	do while a > (0 - 236.741)
#   7: 		b = 9
#   8: 		do while b > 3.02
#   9: 			print 63;
#  10: 			b = b - 1.123
#  11: 		loop
#  12: 		a = a + a * 2
#  13: 	loop
#  14: 	a = 78
#  15: 	do while a > 55
#  16: 		print 57;
#  17: 		a = a - 5.38
#  18: 	loop
#  19: end scope

########################################

# Generated code                                                                #     2/83
# IFJ                                                                           #     3/83
# xbenes49 xbolsh00 xpolan09                                                    #     4/83
# 2017                                                                          #     5/83
.IFJcode17                                                                      #     7/83
CREATEFRAME                                                                     #     8/83
PUSHFRAME                                                                       #     9/83
DEFVAR LF@*tmp                                                                  #    10/83
DEFVAR LF@*foo                                                                  #    11/83
DEFVAR LF@*bar                                                                  #    12/83
JUMP $main                                                                      #    13/83
LABEL $main                                                                     #    15/83
DEFVAR LF@a                                                                     #    16/83
PUSHS float@0                                                                   #    17/83
POPS LF@a                                                                       #    18/83
DEFVAR LF@b                                                                     #    19/83
PUSHS float@0                                                                   #    20/83
POPS LF@b                                                                       #    21/83
PUSHS int@0                                                                     #    22/83
INT2FLOATS                                                                      #    23/83
PUSHS float@123.789                                                             #    24/83
SUBS                                                                            #    25/83
POPS LF@a                                                                       #    26/83
LABEL $aaaaaa                                                                   #    27/83
PUSHS LF@a                                                                      #    28/83
PUSHS int@0                                                                     #    29/83
INT2FLOATS                                                                      #    30/83
PUSHS float@236.741                                                             #    31/83
SUBS                                                                            #    32/83
GTS                                                                             #    33/83
PUSHS bool@true                                                                 #    34/83
JUMPIFNEQS $baaaaa                                                              #    35/83
PUSHS int@9                                                                     #    36/83
INT2FLOATS                                                                      #    37/83
POPS LF@b                                                                       #    38/83
LABEL $caaaaa                                                                   #    39/83
PUSHS LF@b                                                                      #    40/83
PUSHS float@3.02                                                                #    41/83
GTS                                                                             #    42/83
PUSHS bool@true                                                                 #    43/83
JUMPIFNEQS $daaaaa                                                              #    44/83
PUSHS int@63                                                                    #    45/83
POPS LF@*tmp                                                                    #    46/83
WRITE LF@*tmp                                                                   #    47/83
PUSHS LF@b                                                                      #    48/83
PUSHS float@1.123                                                               #    49/83
SUBS                                                                            #    50/83
POPS LF@b                                                                       #    51/83
JUMP $caaaaa                                                                    #    52/83
LABEL $daaaaa                                                                   #    53/83
PUSHS LF@a                                                                      #    54/83
PUSHS LF@a                                                                      #    55/83
PUSHS int@2                                                                     #    56/83
INT2FLOATS                                                                      #    57/83
MULS                                                                            #    58/83
ADDS                                                                            #    59/83
POPS LF@a                                                                       #    60/83
JUMP $aaaaaa                                                                    #    61/83
LABEL $baaaaa                                                                   #    62/83
PUSHS int@78                                                                    #    63/83
INT2FLOATS                                                                      #    64/83
POPS LF@a                                                                       #    65/83
LABEL $eaaaaa                                                                   #    66/83
PUSHS LF@a                                                                      #    67/83
PUSHS int@55                                                                    #    68/83
INT2FLOATS                                                                      #    69/83
GTS                                                                             #    70/83
PUSHS bool@true                                                                 #    71/83
JUMPIFNEQS $faaaaa                                                              #    72/83
PUSHS int@57                                                                    #    73/83
POPS LF@*tmp                                                                    #    74/83
WRITE LF@*tmp                                                                   #    75/83
PUSHS LF@a                                                                      #    76/83
PUSHS float@5.38                                                                #    77/83
SUBS                                                                            #    78/83
POPS LF@a                                                                       #    79/83
JUMP $eaaaaa                                                                    #    80/83
LABEL $faaaaa                                                                   #    81/83
JUMP $end                                                                       #    82/83
LABEL $end                                                                      #    83/83

