# 2017-12-04 00:15:01.394602
# SECTION: 06_loops
# TEST: 20
# INFO: cyclus with constant propagation
# REQUIRED EXTENSIONS: 
# ACTIVATED EXTENSIONS: BASE, UNARY
# STATE: SUCCESS
# 
# COMPILER STDERR:
# 
# INTERPRETER STDERR:
# Executing instruction: ICREATEFRAME at line: 8 with following arguments:
# Executing instruction: IPUSHFRAME at line: 9 with following arguments:
# Executing instruction: IDEFVAR at line: 10 with following arguments:
# Dest: LF@*tmp
# Executing instruction: IDEFVAR at line: 11 with following arguments:
# Dest: LF@*foo
# Executing instruction: IDEFVAR at line: 12 with following arguments:
# Dest: LF@*bar
# Executing instruction: IJUMP at line: 13 with following arguments:
# Executing instruction: ILABEL at line: 15 with following arguments:
# Executing instruction: IDEFVAR at line: 16 with following arguments:
# Dest: LF@a
# Executing instruction: IPUSHS at line: 17 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 18 with following arguments:
# Arg1: Stack@=0(int)
# Dest: LF@a()
# Executing instruction: IPUSHS at line: 19 with following arguments:
# Arg1: Const@=10(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 20 with following arguments:
# Arg1: Stack@=10(int)
# Dest: LF@a=0(int)
# Executing instruction: IPUSHS at line: 21 with following arguments:
# Arg1: LF@a=10(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 22 with following arguments:
# Arg1: Const@=10(int)
# Dest: Stack@()
# Executing instruction: IADDS at line: 23 with following arguments:
# Arg1: Stack@=10(int)
# Arg2: Stack@=10(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 24 with following arguments:
# Arg1: Stack@=20(int)
# Dest: LF@a=10(int)
# Executing instruction: IDEFVAR at line: 25 with following arguments:
# Dest: LF@b
# Executing instruction: IPUSHS at line: 26 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 27 with following arguments:
# Arg1: Stack@=0(int)
# Dest: LF@b()
# Executing instruction: IPUSHS at line: 28 with following arguments:
# Arg1: LF@a=20(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 29 with following arguments:
# Arg1: Const@=20(int)
# Dest: Stack@()
# Executing instruction: IADDS at line: 30 with following arguments:
# Arg1: Stack@=20(int)
# Arg2: Stack@=20(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 31 with following arguments:
# Arg1: Stack@=40(int)
# Dest: LF@b=0(int)
# Executing instruction: IDEFVAR at line: 32 with following arguments:
# Dest: LF@c
# Executing instruction: IPUSHS at line: 33 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 34 with following arguments:
# Arg1: Stack@=0(int)
# Dest: LF@c()
# Executing instruction: IPUSHS at line: 35 with following arguments:
# Arg1: LF@a=20(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 36 with following arguments:
# Arg1: Const@=10(int)
# Dest: Stack@()
# Executing instruction: IADDS at line: 37 with following arguments:
# Arg1: Stack@=20(int)
# Arg2: Stack@=10(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 38 with following arguments:
# Arg1: LF@b=40(int)
# Dest: Stack@()
# Executing instruction: IADDS at line: 39 with following arguments:
# Arg1: Stack@=30(int)
# Arg2: Stack@=40(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 40 with following arguments:
# Arg1: Stack@=70(int)
# Dest: LF@c=0(int)
# Executing instruction: ILABEL at line: 41 with following arguments:
# Executing instruction: IPUSHS at line: 42 with following arguments:
# Arg1: LF@c=70(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 43 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 44 with following arguments:
# Arg1: Stack@=70(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 45 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 46 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 47 with following arguments:
# Arg1: LF@c=70(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 48 with following arguments:
# Arg1: Stack@=70(int)
# Dest: LF@*tmp()
# Executing instruction: IWRITE at line: 49 with following arguments:
# Arg1: LF@*tmp=70(int)
# Executing instruction: IPUSHS at line: 50 with following arguments:
# Arg1: LF@c=70(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 51 with following arguments:
# Arg1: LF@a=20(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 52 with following arguments:
# Arg1: Stack@=70(int)
# Arg2: Stack@=20(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 53 with following arguments:
# Arg1: Stack@=50(int)
# Dest: LF@c=70(int)
# Executing instruction: IJUMP at line: 54 with following arguments:
# Executing instruction: ILABEL at line: 41 with following arguments:
# Executing instruction: IPUSHS at line: 42 with following arguments:
# Arg1: LF@c=50(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 43 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 44 with following arguments:
# Arg1: Stack@=50(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 45 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 46 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 47 with following arguments:
# Arg1: LF@c=50(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 48 with following arguments:
# Arg1: Stack@=50(int)
# Dest: LF@*tmp=70(int)
# Executing instruction: IWRITE at line: 49 with following arguments:
# Arg1: LF@*tmp=50(int)
# Executing instruction: IPUSHS at line: 50 with following arguments:
# Arg1: LF@c=50(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 51 with following arguments:
# Arg1: LF@a=20(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 52 with following arguments:
# Arg1: Stack@=50(int)
# Arg2: Stack@=20(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 53 with following arguments:
# Arg1: Stack@=30(int)
# Dest: LF@c=50(int)
# Executing instruction: IJUMP at line: 54 with following arguments:
# Executing instruction: ILABEL at line: 41 with following arguments:
# Executing instruction: IPUSHS at line: 42 with following arguments:
# Arg1: LF@c=30(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 43 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 44 with following arguments:
# Arg1: Stack@=30(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 45 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 46 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 47 with following arguments:
# Arg1: LF@c=30(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 48 with following arguments:
# Arg1: Stack@=30(int)
# Dest: LF@*tmp=50(int)
# Executing instruction: IWRITE at line: 49 with following arguments:
# Arg1: LF@*tmp=30(int)
# Executing instruction: IPUSHS at line: 50 with following arguments:
# Arg1: LF@c=30(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 51 with following arguments:
# Arg1: LF@a=20(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 52 with following arguments:
# Arg1: Stack@=30(int)
# Arg2: Stack@=20(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 53 with following arguments:
# Arg1: Stack@=10(int)
# Dest: LF@c=30(int)
# Executing instruction: IJUMP at line: 54 with following arguments:
# Executing instruction: ILABEL at line: 41 with following arguments:
# Executing instruction: IPUSHS at line: 42 with following arguments:
# Arg1: LF@c=10(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 43 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 44 with following arguments:
# Arg1: Stack@=10(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 45 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 46 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 47 with following arguments:
# Arg1: LF@c=10(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 48 with following arguments:
# Arg1: Stack@=10(int)
# Dest: LF@*tmp=30(int)
# Executing instruction: IWRITE at line: 49 with following arguments:
# Arg1: LF@*tmp=10(int)
# Executing instruction: IPUSHS at line: 50 with following arguments:
# Arg1: LF@c=10(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 51 with following arguments:
# Arg1: LF@a=20(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 52 with following arguments:
# Arg1: Stack@=10(int)
# Arg2: Stack@=20(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 53 with following arguments:
# Arg1: Stack@=-10(int)
# Dest: LF@c=10(int)
# Executing instruction: IJUMP at line: 54 with following arguments:
# Executing instruction: ILABEL at line: 41 with following arguments:
# Executing instruction: IPUSHS at line: 42 with following arguments:
# Arg1: LF@c=-10(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 43 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 44 with following arguments:
# Arg1: Stack@=-10(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 45 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 46 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 55 with following arguments:
# Executing instruction: IJUMP at line: 56 with following arguments:
# Executing instruction: ILABEL at line: 57 with following arguments:
# Executing instruction: IGROOT at line: 59 with following arguments:
# I am Groot at 59 (540).
# 
# STDOUT DIFF:
# 

# INTERPRETER STDIN: 
# 
#
# EXPECTED COMPILER EXIT CODE: 0
# CURRENT COMPILER EXIT CODE: 0
# EXPECTED INTERPRETER EXIT CODE: 0
# CURRENT INTERPRETER EXIT CODE: 0
# PRICE: 540 (135+405)
# GROOT: 540
# 
#   1: ' cyclus with constant propagation
#   2: 
#   3: scope
#   4: 
#   5:     dim a as integer
#   6: 
#   7:     a = 10
#   8: 
#   9:     a = a + 10
#  10: 
#  11:     dim b as integer
#  12:     b = a + 20
#  13: 
#  14:     dim c as integer
#  15: 
#  16:     c = a + 10 + b
#  17: 
#  18:     do while c > 0
#  19: 
#  20:         print c;
#  21:         c = c - a
#  22:     loop
#  23: 
#  24: end scope

########################################

# Generated code                                                                #     2/57
# IFJ                                                                           #     3/57
# xbenes49 xbolsh00 xpolan09                                                    #     4/57
# 2017                                                                          #     5/57
.IFJcode17                                                                      #     7/57
CREATEFRAME                                                                     #     8/57
PUSHFRAME                                                                       #     9/57
DEFVAR LF@*tmp                                                                  #    10/57
DEFVAR LF@*foo                                                                  #    11/57
DEFVAR LF@*bar                                                                  #    12/57
JUMP $main                                                                      #    13/57
LABEL $main                                                                     #    15/57
DEFVAR LF@a                                                                     #    16/57
PUSHS int@0                                                                     #    17/57
POPS LF@a                                                                       #    18/57
PUSHS int@10                                                                    #    19/57
POPS LF@a                                                                       #    20/57
PUSHS LF@a                                                                      #    21/57
PUSHS int@10                                                                    #    22/57
ADDS                                                                            #    23/57
POPS LF@a                                                                       #    24/57
DEFVAR LF@b                                                                     #    25/57
PUSHS int@0                                                                     #    26/57
POPS LF@b                                                                       #    27/57
PUSHS LF@a                                                                      #    28/57
PUSHS int@20                                                                    #    29/57
ADDS                                                                            #    30/57
POPS LF@b                                                                       #    31/57
DEFVAR LF@c                                                                     #    32/57
PUSHS int@0                                                                     #    33/57
POPS LF@c                                                                       #    34/57
PUSHS LF@a                                                                      #    35/57
PUSHS int@10                                                                    #    36/57
ADDS                                                                            #    37/57
PUSHS LF@b                                                                      #    38/57
ADDS                                                                            #    39/57
POPS LF@c                                                                       #    40/57
LABEL $aaaaaa                                                                   #    41/57
PUSHS LF@c                                                                      #    42/57
PUSHS int@0                                                                     #    43/57
GTS                                                                             #    44/57
PUSHS bool@true                                                                 #    45/57
JUMPIFNEQS $baaaaa                                                              #    46/57
PUSHS LF@c                                                                      #    47/57
POPS LF@*tmp                                                                    #    48/57
WRITE LF@*tmp                                                                   #    49/57
PUSHS LF@c                                                                      #    50/57
PUSHS LF@a                                                                      #    51/57
SUBS                                                                            #    52/57
POPS LF@c                                                                       #    53/57
JUMP $aaaaaa                                                                    #    54/57
LABEL $baaaaa                                                                   #    55/57
JUMP $end                                                                       #    56/57
LABEL $end                                                                      #    57/57

