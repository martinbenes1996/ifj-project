# 2017-12-04 00:15:03.719192
# SECTION: 96_programs
# TEST: 05
# INFO: Print biggest number from three numbers
# REQUIRED EXTENSIONS: 
# ACTIVATED EXTENSIONS: BASE, UNARY
# STATE: SUCCESS
# 
# COMPILER STDERR:
# 
# INTERPRETER STDERR:
# Executing instruction: ICREATEFRAME at line: 8 with following arguments:
# Executing instruction: IPUSHFRAME at line: 9 with following arguments:
# Executing instruction: IDEFVAR at line: 10 with following arguments:
# Dest: LF@*tmp
# Executing instruction: IDEFVAR at line: 11 with following arguments:
# Dest: LF@*foo
# Executing instruction: IDEFVAR at line: 12 with following arguments:
# Dest: LF@*bar
# Executing instruction: IJUMP at line: 13 with following arguments:
# Executing instruction: ILABEL at line: 15 with following arguments:
# Executing instruction: IDEFVAR at line: 16 with following arguments:
# Dest: LF@a
# Executing instruction: IPUSHS at line: 17 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 18 with following arguments:
# Arg1: Stack@=0(int)
# Dest: LF@a()
# Executing instruction: IDEFVAR at line: 19 with following arguments:
# Dest: LF@b
# Executing instruction: IPUSHS at line: 20 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 21 with following arguments:
# Arg1: Stack@=0(int)
# Dest: LF@b()
# Executing instruction: IDEFVAR at line: 22 with following arguments:
# Dest: LF@c
# Executing instruction: IPUSHS at line: 23 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 24 with following arguments:
# Arg1: Stack@=0(int)
# Dest: LF@c()
# Executing instruction: IWRITE at line: 25 with following arguments:
# Arg1: Const@=? (string)
# Executing instruction: IREAD at line: 26 with following arguments:
# Dest: LF@a=0(int)
# Executing instruction: IWRITE at line: 27 with following arguments:
# Arg1: Const@=? (string)
# Executing instruction: IREAD at line: 28 with following arguments:
# Dest: LF@b=0(int)
# Executing instruction: IWRITE at line: 29 with following arguments:
# Arg1: Const@=? (string)
# Executing instruction: IREAD at line: 30 with following arguments:
# Dest: LF@c=0(int)
# Executing instruction: IPUSHS at line: 31 with following arguments:
# Arg1: LF@c=125(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 32 with following arguments:
# Arg1: LF@b=150(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 33 with following arguments:
# Arg1: Stack@=125(int)
# Arg2: Stack@=150(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 34 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 35 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 51 with following arguments:
# Executing instruction: IPUSHS at line: 52 with following arguments:
# Arg1: LF@b=150(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 53 with following arguments:
# Arg1: Stack@=150(int)
# Dest: LF@*tmp()
# Executing instruction: IWRITE at line: 54 with following arguments:
# Arg1: LF@*tmp=150(int)
# Executing instruction: ILABEL at line: 55 with following arguments:
# Executing instruction: IJUMP at line: 56 with following arguments:
# Executing instruction: ILABEL at line: 57 with following arguments:
# Executing instruction: IGROOT at line: 59 with following arguments:
# I am Groot at 59 (164).
# 
# STDOUT DIFF:
# 

# INTERPRETER STDIN: 
# 100
# 150
# 125
#
# EXPECTED COMPILER EXIT CODE: 0
# CURRENT COMPILER EXIT CODE: 0
# EXPECTED INTERPRETER EXIT CODE: 0
# CURRENT INTERPRETER EXIT CODE: 0
# PRICE: 164 (57+107)
# GROOT: 164
# 
#   1: ' Print biggest number from three numbers
#   2: scope
#   3:     
#   4:    dim a as integer
#   5:    dim b as integer
#   6:    dim c as integer
#   7:    
#   8:    input a
#   9:    input b
#  10:    input c
#  11:    
#  12:    if c > b then
#  13:         if c > a then
#  14:             print c;
#  15:         else
#  16:             print a;
#  17:         end if
#  18:    else
#  19:         print b;
#  20:    end if
#  21:     
#  22: end scope

########################################

# Generated code                                                                #     2/57
# IFJ                                                                           #     3/57
# xbenes49 xbolsh00 xpolan09                                                    #     4/57
# 2017                                                                          #     5/57
.IFJcode17                                                                      #     7/57
CREATEFRAME                                                                     #     8/57
PUSHFRAME                                                                       #     9/57
DEFVAR LF@*tmp                                                                  #    10/57
DEFVAR LF@*foo                                                                  #    11/57
DEFVAR LF@*bar                                                                  #    12/57
JUMP $main                                                                      #    13/57
LABEL $main                                                                     #    15/57
DEFVAR LF@a                                                                     #    16/57
PUSHS int@0                                                                     #    17/57
POPS LF@a                                                                       #    18/57
DEFVAR LF@b                                                                     #    19/57
PUSHS int@0                                                                     #    20/57
POPS LF@b                                                                       #    21/57
DEFVAR LF@c                                                                     #    22/57
PUSHS int@0                                                                     #    23/57
POPS LF@c                                                                       #    24/57
WRITE string@?\032                                                              #    25/57
READ LF@a int                                                                   #    26/57
WRITE string@?\032                                                              #    27/57
READ LF@b int                                                                   #    28/57
WRITE string@?\032                                                              #    29/57
READ LF@c int                                                                   #    30/57
PUSHS LF@c                                                                      #    31/57
PUSHS LF@b                                                                      #    32/57
GTS                                                                             #    33/57
PUSHS bool@true                                                                 #    34/57
JUMPIFNEQS $aaaaaa                                                              #    35/57
PUSHS LF@c                                                                      #    36/57
PUSHS LF@a                                                                      #    37/57
GTS                                                                             #    38/57
PUSHS bool@true                                                                 #    39/57
JUMPIFNEQS $baaaaa                                                              #    40/57
PUSHS LF@c                                                                      #    41/57
POPS LF@*tmp                                                                    #    42/57
WRITE LF@*tmp                                                                   #    43/57
JUMP $caaaaa                                                                    #    44/57
LABEL $baaaaa                                                                   #    45/57
PUSHS LF@a                                                                      #    46/57
POPS LF@*tmp                                                                    #    47/57
WRITE LF@*tmp                                                                   #    48/57
LABEL $caaaaa                                                                   #    49/57
JUMP $daaaaa                                                                    #    50/57
LABEL $aaaaaa                                                                   #    51/57
PUSHS LF@b                                                                      #    52/57
POPS LF@*tmp                                                                    #    53/57
WRITE LF@*tmp                                                                   #    54/57
LABEL $daaaaa                                                                   #    55/57
JUMP $end                                                                       #    56/57
LABEL $end                                                                      #    57/57

