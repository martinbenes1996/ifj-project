# 2017-12-04 00:15:03.773383
# SECTION: 96_programs
# TEST: 09
# INFO: Count modulo
# REQUIRED EXTENSIONS: 
# ACTIVATED EXTENSIONS: BASE, UNARY
# STATE: SUCCESS
# 
# COMPILER STDERR:
# 
# INTERPRETER STDERR:
# Executing instruction: ICREATEFRAME at line: 8 with following arguments:
# Executing instruction: IPUSHFRAME at line: 9 with following arguments:
# Executing instruction: IDEFVAR at line: 10 with following arguments:
# Dest: LF@*tmp
# Executing instruction: IDEFVAR at line: 11 with following arguments:
# Dest: LF@*foo
# Executing instruction: IDEFVAR at line: 12 with following arguments:
# Dest: LF@*bar
# Executing instruction: IJUMP at line: 13 with following arguments:
# Executing instruction: ILABEL at line: 46 with following arguments:
# Executing instruction: IDEFVAR at line: 47 with following arguments:
# Dest: LF@a
# Executing instruction: IPUSHS at line: 48 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 49 with following arguments:
# Arg1: Stack@=0(int)
# Dest: LF@a()
# Executing instruction: ICREATEFRAME at line: 50 with following arguments:
# Executing instruction: IDEFVAR at line: 51 with following arguments:
# Dest: TF@*1
# Executing instruction: IPUSHS at line: 52 with following arguments:
# Arg1: Const@=10(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 53 with following arguments:
# Arg1: Stack@=10(int)
# Dest: TF@*1()
# Executing instruction: IDEFVAR at line: 54 with following arguments:
# Dest: TF@*2
# Executing instruction: IPUSHS at line: 55 with following arguments:
# Arg1: Const@=4(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 56 with following arguments:
# Arg1: Stack@=4(int)
# Dest: TF@*2()
# Executing instruction: ICALL at line: 57 with following arguments:
# Executing instruction: ILABEL at line: 17 with following arguments:
# Executing instruction: IPUSHFRAME at line: 18 with following arguments:
# Executing instruction: IDEFVAR at line: 19 with following arguments:
# Dest: LF@*tmp
# Executing instruction: IDEFVAR at line: 20 with following arguments:
# Dest: LF@*foo
# Executing instruction: IDEFVAR at line: 21 with following arguments:
# Dest: LF@*bar
# Executing instruction: IDEFVAR at line: 22 with following arguments:
# Dest: LF@*ret
# Executing instruction: IDEFVAR at line: 23 with following arguments:
# Dest: LF@delitel
# Executing instruction: IMOVE at line: 24 with following arguments:
# Arg1: LF@*1=10(int)
# Dest: LF@delitel()
# Executing instruction: IDEFVAR at line: 25 with following arguments:
# Dest: LF@delenec
# Executing instruction: IMOVE at line: 26 with following arguments:
# Arg1: LF@*2=4(int)
# Dest: LF@delenec()
# Executing instruction: IDEFVAR at line: 27 with following arguments:
# Dest: LF@vysledek
# Executing instruction: IPUSHS at line: 28 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 29 with following arguments:
# Arg1: Stack@=0(int)
# Dest: LF@vysledek()
# Executing instruction: IPUSHS at line: 30 with following arguments:
# Arg1: LF@delitel=10(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 31 with following arguments:
# Arg1: LF@delitel=10(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 32 with following arguments:
# Arg1: Stack@=10(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 33 with following arguments:
# Arg1: LF@delenec=4(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 34 with following arguments:
# Arg1: Stack@=4(int)
# Dest: Stack@()
# Executing instruction: IDIVS at line: 35 with following arguments:
# Arg1: Stack@=10(double)
# Arg2: Stack@=4(double)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 36 with following arguments:
# Arg1: Stack@=2.5(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 37 with following arguments:
# Arg1: LF@delenec=4(int)
# Dest: Stack@()
# Executing instruction: IMULTS at line: 38 with following arguments:
# Arg1: Stack@=2(int)
# Arg2: Stack@=4(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 39 with following arguments:
# Arg1: Stack@=10(int)
# Arg2: Stack@=8(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 40 with following arguments:
# Arg1: Stack@=2(int)
# Dest: LF@vysledek=0(int)
# Executing instruction: IPUSHS at line: 41 with following arguments:
# Arg1: LF@vysledek=2(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 42 with following arguments:
# Arg1: Stack@=2(int)
# Dest: LF@*ret()
# Executing instruction: ICLEARS at line: 43 with following arguments:
# Executing instruction: IRETURN at line: 44 with following arguments:
# Executing instruction: IPOPFRAME at line: 58 with following arguments:
# Executing instruction: IPUSHS at line: 59 with following arguments:
# Arg1: TF@*ret=2(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 60 with following arguments:
# Arg1: Stack@=2(int)
# Dest: LF@a=0(int)
# Executing instruction: IPUSHS at line: 61 with following arguments:
# Arg1: LF@a=2(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 62 with following arguments:
# Arg1: Stack@=2(int)
# Dest: LF@*tmp()
# Executing instruction: IWRITE at line: 63 with following arguments:
# Arg1: LF@*tmp=2(int)
# Executing instruction: IJUMP at line: 64 with following arguments:
# Executing instruction: ILABEL at line: 65 with following arguments:
# Executing instruction: IGROOT at line: 67 with following arguments:
# I am Groot at 67 (280).
# 
# STDOUT DIFF:
# 

# INTERPRETER STDIN: 
# 
#
# EXPECTED COMPILER EXIT CODE: 0
# CURRENT COMPILER EXIT CODE: 0
# EXPECTED INTERPRETER EXIT CODE: 0
# CURRENT INTERPRETER EXIT CODE: 0
# PRICE: 280 (76+204)
# GROOT: 280
# 
#   1: ' Count modulo
#   2: function modulo(delitel as integer, delenec as integer) as integer
#   3:     dim vysledek as integer
#   4:     vysledek = delitel - (delitel\delenec)*delenec
#   5:     return vysledek
#   6: end function
#   7: 
#   8: scope
#   9: 	dim a as integer
#  10: 	a = modulo (10, 4)
#  11: 	print a;
#  12: end scope

########################################

# Generated code                                                                #     2/65
# IFJ                                                                           #     3/65
# xbenes49 xbolsh00 xpolan09                                                    #     4/65
# 2017                                                                          #     5/65
.IFJcode17                                                                      #     7/65
CREATEFRAME                                                                     #     8/65
PUSHFRAME                                                                       #     9/65
DEFVAR LF@*tmp                                                                  #    10/65
DEFVAR LF@*foo                                                                  #    11/65
DEFVAR LF@*bar                                                                  #    12/65
JUMP $main                                                                      #    13/65
# function modulo                                                               #    16/65
LABEL modulo                                                                    #    17/65
PUSHFRAME                                                                       #    18/65
DEFVAR LF@*tmp                                                                  #    19/65
DEFVAR LF@*foo                                                                  #    20/65
DEFVAR LF@*bar                                                                  #    21/65
DEFVAR LF@*ret                                                                  #    22/65
DEFVAR LF@delitel                                                               #    23/65
MOVE LF@delitel LF@*1                                                           #    24/65
DEFVAR LF@delenec                                                               #    25/65
MOVE LF@delenec LF@*2                                                           #    26/65
DEFVAR LF@vysledek                                                              #    27/65
PUSHS int@0                                                                     #    28/65
POPS LF@vysledek                                                                #    29/65
PUSHS LF@delitel                                                                #    30/65
PUSHS LF@delitel                                                                #    31/65
INT2FLOATS                                                                      #    32/65
PUSHS LF@delenec                                                                #    33/65
INT2FLOATS                                                                      #    34/65
DIVS                                                                            #    35/65
FLOAT2R2EINTS                                                                   #    36/65
PUSHS LF@delenec                                                                #    37/65
MULS                                                                            #    38/65
SUBS                                                                            #    39/65
POPS LF@vysledek                                                                #    40/65
PUSHS LF@vysledek                                                               #    41/65
POPS LF@*ret                                                                    #    42/65
CLEARS                                                                          #    43/65
RETURN                                                                          #    44/65
LABEL $main                                                                     #    46/65
DEFVAR LF@a                                                                     #    47/65
PUSHS int@0                                                                     #    48/65
POPS LF@a                                                                       #    49/65
CREATEFRAME                                                                     #    50/65
DEFVAR TF@*1                                                                    #    51/65
PUSHS int@10                                                                    #    52/65
POPS TF@*1                                                                      #    53/65
DEFVAR TF@*2                                                                    #    54/65
PUSHS int@4                                                                     #    55/65
POPS TF@*2                                                                      #    56/65
CALL modulo                                                                     #    57/65
POPFRAME                                                                        #    58/65
PUSHS TF@*ret                                                                   #    59/65
POPS LF@a                                                                       #    60/65
PUSHS LF@a                                                                      #    61/65
POPS LF@*tmp                                                                    #    62/65
WRITE LF@*tmp                                                                   #    63/65
JUMP $end                                                                       #    64/65
LABEL $end                                                                      #    65/65

