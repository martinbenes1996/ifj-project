# 2017-12-04 00:14:59.113501
# SECTION: 02_functions
# TEST: 12
# INFO: Recursive function
# REQUIRED EXTENSIONS: 
# ACTIVATED EXTENSIONS: BASE, UNARY
# STATE: SUCCESS
# 
# COMPILER STDERR:
# 
# INTERPRETER STDERR:
# Executing instruction: ICREATEFRAME at line: 8 with following arguments:
# Executing instruction: IPUSHFRAME at line: 9 with following arguments:
# Executing instruction: IDEFVAR at line: 10 with following arguments:
# Dest: LF@*tmp
# Executing instruction: IDEFVAR at line: 11 with following arguments:
# Dest: LF@*foo
# Executing instruction: IDEFVAR at line: 12 with following arguments:
# Dest: LF@*bar
# Executing instruction: IJUMP at line: 13 with following arguments:
# Executing instruction: ILABEL at line: 57 with following arguments:
# Executing instruction: IDEFVAR at line: 58 with following arguments:
# Dest: LF@a
# Executing instruction: IPUSHS at line: 59 with following arguments:
# Arg1: Const@=12(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 60 with following arguments:
# Arg1: Stack@=12(int)
# Dest: LF@a()
# Executing instruction: ICREATEFRAME at line: 61 with following arguments:
# Executing instruction: IDEFVAR at line: 62 with following arguments:
# Dest: TF@*1
# Executing instruction: IPUSHS at line: 63 with following arguments:
# Arg1: Const@=4(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 64 with following arguments:
# Arg1: Stack@=4(int)
# Dest: TF@*1()
# Executing instruction: ICALL at line: 65 with following arguments:
# Executing instruction: ILABEL at line: 17 with following arguments:
# Executing instruction: IPUSHFRAME at line: 18 with following arguments:
# Executing instruction: IDEFVAR at line: 19 with following arguments:
# Dest: LF@*tmp
# Executing instruction: IDEFVAR at line: 20 with following arguments:
# Dest: LF@*foo
# Executing instruction: IDEFVAR at line: 21 with following arguments:
# Dest: LF@*bar
# Executing instruction: IDEFVAR at line: 22 with following arguments:
# Dest: LF@*ret
# Executing instruction: IDEFVAR at line: 23 with following arguments:
# Dest: LF@param
# Executing instruction: IMOVE at line: 24 with following arguments:
# Arg1: LF@*1=4(int)
# Dest: LF@param()
# Executing instruction: IDEFVAR at line: 25 with following arguments:
# Dest: LF@param0
# Executing instruction: IPUSHS at line: 26 with following arguments:
# Arg1: Const@=12(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 27 with following arguments:
# Arg1: Stack@=12(int)
# Dest: LF@param0()
# Executing instruction: IDEFVAR at line: 28 with following arguments:
# Dest: LF@res
# Executing instruction: IPUSHS at line: 29 with following arguments:
# Arg1: Const@=10(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 30 with following arguments:
# Arg1: Stack@=10(int)
# Dest: LF@res()
# Executing instruction: IPUSHS at line: 31 with following arguments:
# Arg1: LF@param=4(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 32 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 33 with following arguments:
# Arg1: Stack@=4(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 34 with following arguments:
# Arg1: Stack@=3(int)
# Dest: LF@param0=12(int)
# Executing instruction: IPUSHS at line: 35 with following arguments:
# Arg1: LF@param=4(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 36 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 37 with following arguments:
# Arg1: Stack@=4(int)
# Arg2: Stack@=0(int)
# Executing instruction: ILABEL at line: 43 with following arguments:
# Executing instruction: ICREATEFRAME at line: 44 with following arguments:
# Executing instruction: IDEFVAR at line: 45 with following arguments:
# Dest: TF@*1
# Executing instruction: IPUSHS at line: 46 with following arguments:
# Arg1: LF@param0=3(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 47 with following arguments:
# Arg1: Stack@=3(int)
# Dest: TF@*1()
# Executing instruction: ICALL at line: 48 with following arguments:
# Executing instruction: ILABEL at line: 17 with following arguments:
# Executing instruction: IPUSHFRAME at line: 18 with following arguments:
# Executing instruction: IDEFVAR at line: 19 with following arguments:
# Dest: LF@*tmp
# Executing instruction: IDEFVAR at line: 20 with following arguments:
# Dest: LF@*foo
# Executing instruction: IDEFVAR at line: 21 with following arguments:
# Dest: LF@*bar
# Executing instruction: IDEFVAR at line: 22 with following arguments:
# Dest: LF@*ret
# Executing instruction: IDEFVAR at line: 23 with following arguments:
# Dest: LF@param
# Executing instruction: IMOVE at line: 24 with following arguments:
# Arg1: LF@*1=3(int)
# Dest: LF@param()
# Executing instruction: IDEFVAR at line: 25 with following arguments:
# Dest: LF@param0
# Executing instruction: IPUSHS at line: 26 with following arguments:
# Arg1: Const@=12(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 27 with following arguments:
# Arg1: Stack@=12(int)
# Dest: LF@param0()
# Executing instruction: IDEFVAR at line: 28 with following arguments:
# Dest: LF@res
# Executing instruction: IPUSHS at line: 29 with following arguments:
# Arg1: Const@=10(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 30 with following arguments:
# Arg1: Stack@=10(int)
# Dest: LF@res()
# Executing instruction: IPUSHS at line: 31 with following arguments:
# Arg1: LF@param=3(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 32 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 33 with following arguments:
# Arg1: Stack@=3(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 34 with following arguments:
# Arg1: Stack@=2(int)
# Dest: LF@param0=12(int)
# Executing instruction: IPUSHS at line: 35 with following arguments:
# Arg1: LF@param=3(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 36 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 37 with following arguments:
# Arg1: Stack@=3(int)
# Arg2: Stack@=0(int)
# Executing instruction: ILABEL at line: 43 with following arguments:
# Executing instruction: ICREATEFRAME at line: 44 with following arguments:
# Executing instruction: IDEFVAR at line: 45 with following arguments:
# Dest: TF@*1
# Executing instruction: IPUSHS at line: 46 with following arguments:
# Arg1: LF@param0=2(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 47 with following arguments:
# Arg1: Stack@=2(int)
# Dest: TF@*1()
# Executing instruction: ICALL at line: 48 with following arguments:
# Executing instruction: ILABEL at line: 17 with following arguments:
# Executing instruction: IPUSHFRAME at line: 18 with following arguments:
# Executing instruction: IDEFVAR at line: 19 with following arguments:
# Dest: LF@*tmp
# Executing instruction: IDEFVAR at line: 20 with following arguments:
# Dest: LF@*foo
# Executing instruction: IDEFVAR at line: 21 with following arguments:
# Dest: LF@*bar
# Executing instruction: IDEFVAR at line: 22 with following arguments:
# Dest: LF@*ret
# Executing instruction: IDEFVAR at line: 23 with following arguments:
# Dest: LF@param
# Executing instruction: IMOVE at line: 24 with following arguments:
# Arg1: LF@*1=2(int)
# Dest: LF@param()
# Executing instruction: IDEFVAR at line: 25 with following arguments:
# Dest: LF@param0
# Executing instruction: IPUSHS at line: 26 with following arguments:
# Arg1: Const@=12(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 27 with following arguments:
# Arg1: Stack@=12(int)
# Dest: LF@param0()
# Executing instruction: IDEFVAR at line: 28 with following arguments:
# Dest: LF@res
# Executing instruction: IPUSHS at line: 29 with following arguments:
# Arg1: Const@=10(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 30 with following arguments:
# Arg1: Stack@=10(int)
# Dest: LF@res()
# Executing instruction: IPUSHS at line: 31 with following arguments:
# Arg1: LF@param=2(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 32 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 33 with following arguments:
# Arg1: Stack@=2(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 34 with following arguments:
# Arg1: Stack@=1(int)
# Dest: LF@param0=12(int)
# Executing instruction: IPUSHS at line: 35 with following arguments:
# Arg1: LF@param=2(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 36 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 37 with following arguments:
# Arg1: Stack@=2(int)
# Arg2: Stack@=0(int)
# Executing instruction: ILABEL at line: 43 with following arguments:
# Executing instruction: ICREATEFRAME at line: 44 with following arguments:
# Executing instruction: IDEFVAR at line: 45 with following arguments:
# Dest: TF@*1
# Executing instruction: IPUSHS at line: 46 with following arguments:
# Arg1: LF@param0=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 47 with following arguments:
# Arg1: Stack@=1(int)
# Dest: TF@*1()
# Executing instruction: ICALL at line: 48 with following arguments:
# Executing instruction: ILABEL at line: 17 with following arguments:
# Executing instruction: IPUSHFRAME at line: 18 with following arguments:
# Executing instruction: IDEFVAR at line: 19 with following arguments:
# Dest: LF@*tmp
# Executing instruction: IDEFVAR at line: 20 with following arguments:
# Dest: LF@*foo
# Executing instruction: IDEFVAR at line: 21 with following arguments:
# Dest: LF@*bar
# Executing instruction: IDEFVAR at line: 22 with following arguments:
# Dest: LF@*ret
# Executing instruction: IDEFVAR at line: 23 with following arguments:
# Dest: LF@param
# Executing instruction: IMOVE at line: 24 with following arguments:
# Arg1: LF@*1=1(int)
# Dest: LF@param()
# Executing instruction: IDEFVAR at line: 25 with following arguments:
# Dest: LF@param0
# Executing instruction: IPUSHS at line: 26 with following arguments:
# Arg1: Const@=12(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 27 with following arguments:
# Arg1: Stack@=12(int)
# Dest: LF@param0()
# Executing instruction: IDEFVAR at line: 28 with following arguments:
# Dest: LF@res
# Executing instruction: IPUSHS at line: 29 with following arguments:
# Arg1: Const@=10(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 30 with following arguments:
# Arg1: Stack@=10(int)
# Dest: LF@res()
# Executing instruction: IPUSHS at line: 31 with following arguments:
# Arg1: LF@param=1(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 32 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 33 with following arguments:
# Arg1: Stack@=1(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 34 with following arguments:
# Arg1: Stack@=0(int)
# Dest: LF@param0=12(int)
# Executing instruction: IPUSHS at line: 35 with following arguments:
# Arg1: LF@param=1(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 36 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 37 with following arguments:
# Arg1: Stack@=1(int)
# Arg2: Stack@=0(int)
# Executing instruction: ILABEL at line: 43 with following arguments:
# Executing instruction: ICREATEFRAME at line: 44 with following arguments:
# Executing instruction: IDEFVAR at line: 45 with following arguments:
# Dest: TF@*1
# Executing instruction: IPUSHS at line: 46 with following arguments:
# Arg1: LF@param0=0(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 47 with following arguments:
# Arg1: Stack@=0(int)
# Dest: TF@*1()
# Executing instruction: ICALL at line: 48 with following arguments:
# Executing instruction: ILABEL at line: 17 with following arguments:
# Executing instruction: IPUSHFRAME at line: 18 with following arguments:
# Executing instruction: IDEFVAR at line: 19 with following arguments:
# Dest: LF@*tmp
# Executing instruction: IDEFVAR at line: 20 with following arguments:
# Dest: LF@*foo
# Executing instruction: IDEFVAR at line: 21 with following arguments:
# Dest: LF@*bar
# Executing instruction: IDEFVAR at line: 22 with following arguments:
# Dest: LF@*ret
# Executing instruction: IDEFVAR at line: 23 with following arguments:
# Dest: LF@param
# Executing instruction: IMOVE at line: 24 with following arguments:
# Arg1: LF@*1=0(int)
# Dest: LF@param()
# Executing instruction: IDEFVAR at line: 25 with following arguments:
# Dest: LF@param0
# Executing instruction: IPUSHS at line: 26 with following arguments:
# Arg1: Const@=12(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 27 with following arguments:
# Arg1: Stack@=12(int)
# Dest: LF@param0()
# Executing instruction: IDEFVAR at line: 28 with following arguments:
# Dest: LF@res
# Executing instruction: IPUSHS at line: 29 with following arguments:
# Arg1: Const@=10(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 30 with following arguments:
# Arg1: Stack@=10(int)
# Dest: LF@res()
# Executing instruction: IPUSHS at line: 31 with following arguments:
# Arg1: LF@param=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 32 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 33 with following arguments:
# Arg1: Stack@=0(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 34 with following arguments:
# Arg1: Stack@=-1(int)
# Dest: LF@param0=12(int)
# Executing instruction: IPUSHS at line: 35 with following arguments:
# Arg1: LF@param=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 36 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 37 with following arguments:
# Arg1: Stack@=0(int)
# Arg2: Stack@=0(int)
# Executing instruction: IPUSHS at line: 38 with following arguments:
# Arg1: Const@=42(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 39 with following arguments:
# Arg1: Stack@=42(int)
# Dest: LF@*ret()
# Executing instruction: ICLEARS at line: 40 with following arguments:
# Executing instruction: IRETURN at line: 41 with following arguments:
# Executing instruction: IPOPFRAME at line: 49 with following arguments:
# Executing instruction: IPUSHS at line: 50 with following arguments:
# Arg1: TF@*ret=42(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 51 with following arguments:
# Arg1: Stack@=42(int)
# Dest: LF@res=10(int)
# Executing instruction: IPUSHS at line: 52 with following arguments:
# Arg1: LF@res=42(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 53 with following arguments:
# Arg1: Stack@=42(int)
# Dest: LF@*ret()
# Executing instruction: ICLEARS at line: 54 with following arguments:
# Executing instruction: IRETURN at line: 55 with following arguments:
# Executing instruction: IPOPFRAME at line: 49 with following arguments:
# Executing instruction: IPUSHS at line: 50 with following arguments:
# Arg1: TF@*ret=42(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 51 with following arguments:
# Arg1: Stack@=42(int)
# Dest: LF@res=10(int)
# Executing instruction: IPUSHS at line: 52 with following arguments:
# Arg1: LF@res=42(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 53 with following arguments:
# Arg1: Stack@=42(int)
# Dest: LF@*ret()
# Executing instruction: ICLEARS at line: 54 with following arguments:
# Executing instruction: IRETURN at line: 55 with following arguments:
# Executing instruction: IPOPFRAME at line: 49 with following arguments:
# Executing instruction: IPUSHS at line: 50 with following arguments:
# Arg1: TF@*ret=42(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 51 with following arguments:
# Arg1: Stack@=42(int)
# Dest: LF@res=10(int)
# Executing instruction: IPUSHS at line: 52 with following arguments:
# Arg1: LF@res=42(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 53 with following arguments:
# Arg1: Stack@=42(int)
# Dest: LF@*ret()
# Executing instruction: ICLEARS at line: 54 with following arguments:
# Executing instruction: IRETURN at line: 55 with following arguments:
# Executing instruction: IPOPFRAME at line: 49 with following arguments:
# Executing instruction: IPUSHS at line: 50 with following arguments:
# Arg1: TF@*ret=42(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 51 with following arguments:
# Arg1: Stack@=42(int)
# Dest: LF@res=10(int)
# Executing instruction: IPUSHS at line: 52 with following arguments:
# Arg1: LF@res=42(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 53 with following arguments:
# Arg1: Stack@=42(int)
# Dest: LF@*ret()
# Executing instruction: ICLEARS at line: 54 with following arguments:
# Executing instruction: IRETURN at line: 55 with following arguments:
# Executing instruction: IPOPFRAME at line: 66 with following arguments:
# Executing instruction: IPUSHS at line: 67 with following arguments:
# Arg1: TF@*ret=42(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 68 with following arguments:
# Arg1: Stack@=42(int)
# Dest: LF@a=12(int)
# Executing instruction: IPUSHS at line: 69 with following arguments:
# Arg1: LF@a=42(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 70 with following arguments:
# Arg1: Stack@=42(int)
# Dest: LF@*tmp()
# Executing instruction: IWRITE at line: 71 with following arguments:
# Arg1: LF@*tmp=42(int)
# Executing instruction: IJUMP at line: 72 with following arguments:
# Executing instruction: ILABEL at line: 73 with following arguments:
# Executing instruction: IGROOT at line: 75 with following arguments:
# I am Groot at 75 (925).
# 
# STDOUT DIFF:
# 

# INTERPRETER STDIN: 
# 
#
# EXPECTED COMPILER EXIT CODE: 0
# CURRENT COMPILER EXIT CODE: 0
# EXPECTED INTERPRETER EXIT CODE: 0
# CURRENT INTERPRETER EXIT CODE: 0
# PRICE: 925 (250+675)
# GROOT: 925
# 
#   1: ' Recursive function
#   2: 
#   3: function recursive(param as integer) as integer
#   4: 	dim param0 as integer = 12
#   5: 	dim res as integer = 10
#   6: 	param0 = param - 1
#   7: 	if param = 0 then
#   8: 		return 42
#   9: 	else
#  10: 	    res = recursive(param0)
#  11: 		return res
#  12: 	end if
#  13: end function
#  14: 
#  15: scope
#  16: 	dim a as integer = 12
#  17: 	a = recursive(4)
#  18: 	print a;
#  19: 
#  20: end scope 

########################################

# Generated code                                                                #     2/73
# IFJ                                                                           #     3/73
# xbenes49 xbolsh00 xpolan09                                                    #     4/73
# 2017                                                                          #     5/73
.IFJcode17                                                                      #     7/73
CREATEFRAME                                                                     #     8/73
PUSHFRAME                                                                       #     9/73
DEFVAR LF@*tmp                                                                  #    10/73
DEFVAR LF@*foo                                                                  #    11/73
DEFVAR LF@*bar                                                                  #    12/73
JUMP $main                                                                      #    13/73
# function recursive                                                            #    16/73
LABEL recursive                                                                 #    17/73
PUSHFRAME                                                                       #    18/73
DEFVAR LF@*tmp                                                                  #    19/73
DEFVAR LF@*foo                                                                  #    20/73
DEFVAR LF@*bar                                                                  #    21/73
DEFVAR LF@*ret                                                                  #    22/73
DEFVAR LF@param                                                                 #    23/73
MOVE LF@param LF@*1                                                             #    24/73
DEFVAR LF@param0                                                                #    25/73
PUSHS int@12                                                                    #    26/73
POPS LF@param0                                                                  #    27/73
DEFVAR LF@res                                                                   #    28/73
PUSHS int@10                                                                    #    29/73
POPS LF@res                                                                     #    30/73
PUSHS LF@param                                                                  #    31/73
PUSHS int@1                                                                     #    32/73
SUBS                                                                            #    33/73
POPS LF@param0                                                                  #    34/73
PUSHS LF@param                                                                  #    35/73
PUSHS int@0                                                                     #    36/73
JUMPIFNEQS $aaaaaa                                                              #    37/73
PUSHS int@42                                                                    #    38/73
POPS LF@*ret                                                                    #    39/73
CLEARS                                                                          #    40/73
RETURN                                                                          #    41/73
JUMP $baaaaa                                                                    #    42/73
LABEL $aaaaaa                                                                   #    43/73
CREATEFRAME                                                                     #    44/73
DEFVAR TF@*1                                                                    #    45/73
PUSHS LF@param0                                                                 #    46/73
POPS TF@*1                                                                      #    47/73
CALL recursive                                                                  #    48/73
POPFRAME                                                                        #    49/73
PUSHS TF@*ret                                                                   #    50/73
POPS LF@res                                                                     #    51/73
PUSHS LF@res                                                                    #    52/73
POPS LF@*ret                                                                    #    53/73
CLEARS                                                                          #    54/73
RETURN                                                                          #    55/73
LABEL $baaaaa                                                                   #    56/73
LABEL $main                                                                     #    57/73
DEFVAR LF@a                                                                     #    58/73
PUSHS int@12                                                                    #    59/73
POPS LF@a                                                                       #    60/73
CREATEFRAME                                                                     #    61/73
DEFVAR TF@*1                                                                    #    62/73
PUSHS int@4                                                                     #    63/73
POPS TF@*1                                                                      #    64/73
CALL recursive                                                                  #    65/73
POPFRAME                                                                        #    66/73
PUSHS TF@*ret                                                                   #    67/73
POPS LF@a                                                                       #    68/73
PUSHS LF@a                                                                      #    69/73
POPS LF@*tmp                                                                    #    70/73
WRITE LF@*tmp                                                                   #    71/73
JUMP $end                                                                       #    72/73
LABEL $end                                                                      #    73/73

