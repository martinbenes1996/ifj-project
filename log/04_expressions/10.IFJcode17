# 2017-12-04 00:15:00.170489
# SECTION: 04_expressions
# TEST: 10
# INFO: Convert integer into double
# REQUIRED EXTENSIONS: 
# ACTIVATED EXTENSIONS: BASE, UNARY
# STATE: SUCCESS
# 
# COMPILER STDERR:
# 
# INTERPRETER STDERR:
# Executing instruction: ICREATEFRAME at line: 8 with following arguments:
# Executing instruction: IPUSHFRAME at line: 9 with following arguments:
# Executing instruction: IDEFVAR at line: 10 with following arguments:
# Dest: LF@*tmp
# Executing instruction: IDEFVAR at line: 11 with following arguments:
# Dest: LF@*foo
# Executing instruction: IDEFVAR at line: 12 with following arguments:
# Dest: LF@*bar
# Executing instruction: IJUMP at line: 13 with following arguments:
# Executing instruction: ILABEL at line: 32 with following arguments:
# Executing instruction: IDEFVAR at line: 33 with following arguments:
# Dest: LF@a
# Executing instruction: IPUSHS at line: 34 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 35 with following arguments:
# Arg1: Stack@=0(int)
# Dest: LF@a()
# Executing instruction: IPUSHS at line: 36 with following arguments:
# Arg1: Const@=3(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 37 with following arguments:
# Arg1: Stack@=3(int)
# Dest: LF@a=0(int)
# Executing instruction: IDEFVAR at line: 38 with following arguments:
# Dest: LF@b
# Executing instruction: IPUSHS at line: 39 with following arguments:
# Arg1: Const@=0(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 40 with following arguments:
# Arg1: Stack@=0(double)
# Dest: LF@b()
# Executing instruction: IPUSHS at line: 41 with following arguments:
# Arg1: LF@a=3(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 42 with following arguments:
# Arg1: Stack@=3(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 43 with following arguments:
# Arg1: Const@=2(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 44 with following arguments:
# Arg1: Stack@=2(int)
# Dest: Stack@()
# Executing instruction: IDIVS at line: 45 with following arguments:
# Arg1: Stack@=3(double)
# Arg2: Stack@=2(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 46 with following arguments:
# Arg1: Stack@=1.5(double)
# Dest: LF@b=0(double)
# Executing instruction: IPUSHS at line: 47 with following arguments:
# Arg1: LF@b=1.5(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 48 with following arguments:
# Arg1: Stack@=1.5(double)
# Dest: LF@*tmp()
# Executing instruction: IWRITE at line: 49 with following arguments:
# Arg1: LF@*tmp=1.5(double)
# Executing instruction: IJUMP at line: 50 with following arguments:
# Executing instruction: ILABEL at line: 51 with following arguments:
# Executing instruction: IGROOT at line: 53 with following arguments:
# I am Groot at 53 (125).
# 
# STDOUT DIFF:
# 

# INTERPRETER STDIN: 
# 
#
# EXPECTED COMPILER EXIT CODE: 0
# CURRENT COMPILER EXIT CODE: 0
# EXPECTED INTERPRETER EXIT CODE: 0
# CURRENT INTERPRETER EXIT CODE: 0
# PRICE: 125 (33+92)
# GROOT: 125
# 
#   1: ' Convert integer into double
#   2: function foo(a as integer, b as integer) as integer
#   3: 
#   4: end function
#   5: 
#   6: scope
#   7: 
#   8: 	dim a as integer
#   9: 	a = 3
#  10: 	dim b as double
#  11: 	b = a / 2
#  12: 	print b;
#  13: 
#  14: end scope

########################################

# Generated code                                                                #     2/51
# IFJ                                                                           #     3/51
# xbenes49 xbolsh00 xpolan09                                                    #     4/51
# 2017                                                                          #     5/51
.IFJcode17                                                                      #     7/51
CREATEFRAME                                                                     #     8/51
PUSHFRAME                                                                       #     9/51
DEFVAR LF@*tmp                                                                  #    10/51
DEFVAR LF@*foo                                                                  #    11/51
DEFVAR LF@*bar                                                                  #    12/51
JUMP $main                                                                      #    13/51
# function foo                                                                  #    16/51
LABEL foo                                                                       #    17/51
PUSHFRAME                                                                       #    18/51
DEFVAR LF@*tmp                                                                  #    19/51
DEFVAR LF@*foo                                                                  #    20/51
DEFVAR LF@*bar                                                                  #    21/51
DEFVAR LF@*ret                                                                  #    22/51
DEFVAR LF@a                                                                     #    23/51
MOVE LF@a LF@*1                                                                 #    24/51
DEFVAR LF@b                                                                     #    25/51
MOVE LF@b LF@*2                                                                 #    26/51
PUSHS int@0                                                                     #    28/51
POPS LF@*ret                                                                    #    29/51
CLEARS                                                                          #    30/51
RETURN                                                                          #    31/51
LABEL $main                                                                     #    32/51
DEFVAR LF@a                                                                     #    33/51
PUSHS int@0                                                                     #    34/51
POPS LF@a                                                                       #    35/51
PUSHS int@3                                                                     #    36/51
POPS LF@a                                                                       #    37/51
DEFVAR LF@b                                                                     #    38/51
PUSHS float@0                                                                   #    39/51
POPS LF@b                                                                       #    40/51
PUSHS LF@a                                                                      #    41/51
INT2FLOATS                                                                      #    42/51
PUSHS int@2                                                                     #    43/51
INT2FLOATS                                                                      #    44/51
DIVS                                                                            #    45/51
POPS LF@b                                                                       #    46/51
PUSHS LF@b                                                                      #    47/51
POPS LF@*tmp                                                                    #    48/51
WRITE LF@*tmp                                                                   #    49/51
JUMP $end                                                                       #    50/51
LABEL $end                                                                      #    51/51

