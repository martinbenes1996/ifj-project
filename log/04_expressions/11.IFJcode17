# 2017-12-04 00:15:00.181318
# SECTION: 04_expressions
# TEST: 11
# INFO: Convert double into integer
# REQUIRED EXTENSIONS: 
# ACTIVATED EXTENSIONS: BASE, UNARY
# STATE: SUCCESS
# 
# COMPILER STDERR:
# 
# INTERPRETER STDERR:
# Executing instruction: ICREATEFRAME at line: 8 with following arguments:
# Executing instruction: IPUSHFRAME at line: 9 with following arguments:
# Executing instruction: IDEFVAR at line: 10 with following arguments:
# Dest: LF@*tmp
# Executing instruction: IDEFVAR at line: 11 with following arguments:
# Dest: LF@*foo
# Executing instruction: IDEFVAR at line: 12 with following arguments:
# Dest: LF@*bar
# Executing instruction: IJUMP at line: 13 with following arguments:
# Executing instruction: ILABEL at line: 15 with following arguments:
# Executing instruction: IDEFVAR at line: 16 with following arguments:
# Dest: LF@a
# Executing instruction: IPUSHS at line: 17 with following arguments:
# Arg1: Const@=0(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 18 with following arguments:
# Arg1: Stack@=0(double)
# Dest: LF@a()
# Executing instruction: IPUSHS at line: 19 with following arguments:
# Arg1: Const@=2(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 20 with following arguments:
# Arg1: Stack@=2(double)
# Dest: LF@a=0(double)
# Executing instruction: IDEFVAR at line: 21 with following arguments:
# Dest: LF@b
# Executing instruction: IPUSHS at line: 22 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 23 with following arguments:
# Arg1: Stack@=0(int)
# Dest: LF@b()
# Executing instruction: IPUSHS at line: 24 with following arguments:
# Arg1: LF@a=2(double)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 25 with following arguments:
# Arg1: Stack@=2(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 26 with following arguments:
# Arg1: Stack@=2(int)
# Dest: LF@b=0(int)
# Executing instruction: IPUSHS at line: 27 with following arguments:
# Arg1: LF@b=2(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 28 with following arguments:
# Arg1: Stack@=2(int)
# Dest: LF@*tmp()
# Executing instruction: IWRITE at line: 29 with following arguments:
# Arg1: LF@*tmp=2(int)
# Executing instruction: IJUMP at line: 30 with following arguments:
# Executing instruction: ILABEL at line: 31 with following arguments:
# Executing instruction: IGROOT at line: 33 with following arguments:
# I am Groot at 33 (107).
# 
# STDOUT DIFF:
# 

# INTERPRETER STDIN: 
# 
#
# EXPECTED COMPILER EXIT CODE: 0
# CURRENT COMPILER EXIT CODE: 0
# EXPECTED INTERPRETER EXIT CODE: 0
# CURRENT INTERPRETER EXIT CODE: 0
# PRICE: 107 (28+79)
# GROOT: 107
# 
#   1: ' Convert double into integer
#   2: 
#   3: scope
#   4: 
#   5: 	dim a as double
#   6: 	a = 2.0
#   7: 	dim b as integer
#   8: 	b = a
#   9: 
#  10: 	print b;
#  11: 
#  12: end scope

########################################

# Generated code                                                                #     2/31
# IFJ                                                                           #     3/31
# xbenes49 xbolsh00 xpolan09                                                    #     4/31
# 2017                                                                          #     5/31
.IFJcode17                                                                      #     7/31
CREATEFRAME                                                                     #     8/31
PUSHFRAME                                                                       #     9/31
DEFVAR LF@*tmp                                                                  #    10/31
DEFVAR LF@*foo                                                                  #    11/31
DEFVAR LF@*bar                                                                  #    12/31
JUMP $main                                                                      #    13/31
LABEL $main                                                                     #    15/31
DEFVAR LF@a                                                                     #    16/31
PUSHS float@0                                                                   #    17/31
POPS LF@a                                                                       #    18/31
PUSHS float@2                                                                   #    19/31
POPS LF@a                                                                       #    20/31
DEFVAR LF@b                                                                     #    21/31
PUSHS int@0                                                                     #    22/31
POPS LF@b                                                                       #    23/31
PUSHS LF@a                                                                      #    24/31
FLOAT2R2EINTS                                                                   #    25/31
POPS LF@b                                                                       #    26/31
PUSHS LF@b                                                                      #    27/31
POPS LF@*tmp                                                                    #    28/31
WRITE LF@*tmp                                                                   #    29/31
JUMP $end                                                                       #    30/31
LABEL $end                                                                      #    31/31

