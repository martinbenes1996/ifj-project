# 2017-12-04 00:15:00.666920
# SECTION: 04_expressions
# TEST: 40
# INFO: Double implicit conversion
# REQUIRED EXTENSIONS: 
# ACTIVATED EXTENSIONS: BASE, UNARY
# STATE: FAIL
# 
# COMPILER STDERR:
# 
# INTERPRETER STDERR:
# Executing instruction: ICREATEFRAME at line: 8 with following arguments:
# Executing instruction: IPUSHFRAME at line: 9 with following arguments:
# Executing instruction: IDEFVAR at line: 10 with following arguments:
# Dest: LF@*tmp
# Executing instruction: IDEFVAR at line: 11 with following arguments:
# Dest: LF@*foo
# Executing instruction: IDEFVAR at line: 12 with following arguments:
# Dest: LF@*bar
# Executing instruction: IJUMP at line: 13 with following arguments:
# Executing instruction: ILABEL at line: 15 with following arguments:
# Executing instruction: IDEFVAR at line: 16 with following arguments:
# Dest: LF@x
# Executing instruction: IPUSHS at line: 17 with following arguments:
# Arg1: Const@=15.3(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 18 with following arguments:
# Arg1: Stack@=15.3(double)
# Dest: LF@x()
# Executing instruction: IDEFVAR at line: 19 with following arguments:
# Dest: LF@y
# Executing instruction: IPUSHS at line: 20 with following arguments:
# Arg1: Const@=3.6(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 21 with following arguments:
# Arg1: Stack@=3.6(double)
# Dest: LF@y()
# Executing instruction: IDEFVAR at line: 22 with following arguments:
# Dest: LF@z
# Executing instruction: IPUSHS at line: 23 with following arguments:
# Arg1: Const@=0(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 24 with following arguments:
# Arg1: Stack@=0(double)
# Dest: LF@z()
# Executing instruction: IPUSHS at line: 25 with following arguments:
# Arg1: LF@x=15.3(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 26 with following arguments:
# Arg1: LF@y=3.6(double)
# Dest: Stack@()
# Executing instruction: IDIVS at line: 27 with following arguments:
# Arg1: Stack@=15.3(double)
# Arg2: Stack@=3.6(double)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 28 with following arguments:
# Arg1: Stack@=4.25(double)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 29 with following arguments:
# Arg1: Stack@=4(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 30 with following arguments:
# Arg1: Stack@=4(double)
# Dest: LF@z=0(double)
# Executing instruction: IPUSHS at line: 31 with following arguments:
# Arg1: LF@z=4(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 32 with following arguments:
# Arg1: Stack@=4(double)
# Dest: LF@*tmp()
# Executing instruction: IWRITE at line: 33 with following arguments:
# Arg1: LF@*tmp=4(double)
# Executing instruction: IJUMP at line: 34 with following arguments:
# Executing instruction: ILABEL at line: 35 with following arguments:
# Executing instruction: IGROOT at line: 37 with following arguments:
# I am Groot at 37 (133).
# 
# STDOUT DIFF:
# --- expected
# +++ actual
# @@ -1 +1 @@

# - 3
# + 4

# INTERPRETER STDIN: 
# 
#
# EXPECTED COMPILER EXIT CODE: 0
# CURRENT COMPILER EXIT CODE: 0
# EXPECTED INTERPRETER EXIT CODE: 0
# CURRENT INTERPRETER EXIT CODE: 0
# PRICE: ---
# GROOT: 133
# 
#   1: ' Double implicit conversion
#   2: scope
#   3: 	Dim x as double = 15.3
#   4: 	DIM y as double = 3.6
#   5: 	DIM z as double
#   6: 	z = x \ y
#   7: 	print z;
#   8: 
#   9: end scope

########################################

# Generated code                                                                #     2/35
# IFJ                                                                           #     3/35
# xbenes49 xbolsh00 xpolan09                                                    #     4/35
# 2017                                                                          #     5/35
.IFJcode17                                                                      #     7/35
CREATEFRAME                                                                     #     8/35
PUSHFRAME                                                                       #     9/35
DEFVAR LF@*tmp                                                                  #    10/35
DEFVAR LF@*foo                                                                  #    11/35
DEFVAR LF@*bar                                                                  #    12/35
JUMP $main                                                                      #    13/35
LABEL $main                                                                     #    15/35
DEFVAR LF@x                                                                     #    16/35
PUSHS float@15.3                                                                #    17/35
POPS LF@x                                                                       #    18/35
DEFVAR LF@y                                                                     #    19/35
PUSHS float@3.6                                                                 #    20/35
POPS LF@y                                                                       #    21/35
DEFVAR LF@z                                                                     #    22/35
PUSHS float@0                                                                   #    23/35
POPS LF@z                                                                       #    24/35
PUSHS LF@x                                                                      #    25/35
PUSHS LF@y                                                                      #    26/35
DIVS                                                                            #    27/35
FLOAT2R2EINTS                                                                   #    28/35
INT2FLOATS                                                                      #    29/35
POPS LF@z                                                                       #    30/35
PUSHS LF@z                                                                      #    31/35
POPS LF@*tmp                                                                    #    32/35
WRITE LF@*tmp                                                                   #    33/35
JUMP $end                                                                       #    34/35
LABEL $end                                                                      #    35/35

