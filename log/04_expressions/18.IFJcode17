# 2017-12-04 00:15:00.238853
# SECTION: 04_expressions
# TEST: 18
# INFO: comments inside expressions
# REQUIRED EXTENSIONS: 
# ACTIVATED EXTENSIONS: BASE, UNARY
# STATE: SUCCESS
# 
# COMPILER STDERR:
# 
# INTERPRETER STDERR:
# Executing instruction: ICREATEFRAME at line: 8 with following arguments:
# Executing instruction: IPUSHFRAME at line: 9 with following arguments:
# Executing instruction: IDEFVAR at line: 10 with following arguments:
# Dest: LF@*tmp
# Executing instruction: IDEFVAR at line: 11 with following arguments:
# Dest: LF@*foo
# Executing instruction: IDEFVAR at line: 12 with following arguments:
# Dest: LF@*bar
# Executing instruction: IJUMP at line: 13 with following arguments:
# Executing instruction: ILABEL at line: 28 with following arguments:
# Executing instruction: IDEFVAR at line: 29 with following arguments:
# Dest: LF@a
# Executing instruction: IPUSHS at line: 30 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 31 with following arguments:
# Arg1: Stack@=0(int)
# Dest: LF@a()
# Executing instruction: ICREATEFRAME at line: 32 with following arguments:
# Executing instruction: ICALL at line: 33 with following arguments:
# Executing instruction: ILABEL at line: 17 with following arguments:
# Executing instruction: IPUSHFRAME at line: 18 with following arguments:
# Executing instruction: IDEFVAR at line: 19 with following arguments:
# Dest: LF@*tmp
# Executing instruction: IDEFVAR at line: 20 with following arguments:
# Dest: LF@*foo
# Executing instruction: IDEFVAR at line: 21 with following arguments:
# Dest: LF@*bar
# Executing instruction: IDEFVAR at line: 22 with following arguments:
# Dest: LF@*ret
# Executing instruction: IPUSHS at line: 23 with following arguments:
# Arg1: Const@=39(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 24 with following arguments:
# Arg1: Stack@=39(int)
# Dest: LF@*ret()
# Executing instruction: ICLEARS at line: 25 with following arguments:
# Executing instruction: IRETURN at line: 26 with following arguments:
# Executing instruction: IPOPFRAME at line: 34 with following arguments:
# Executing instruction: IPUSHS at line: 35 with following arguments:
# Arg1: TF@*ret=39(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 36 with following arguments:
# Arg1: Stack@=39(int)
# Dest: LF@a=0(int)
# Executing instruction: IPUSHS at line: 37 with following arguments:
# Arg1: LF@a=39(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 38 with following arguments:
# Arg1: Const@=3(int)
# Dest: Stack@()
# Executing instruction: IADDS at line: 39 with following arguments:
# Arg1: Stack@=39(int)
# Arg2: Stack@=3(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 40 with following arguments:
# Arg1: Const@=6(int)
# Dest: Stack@()
# Executing instruction: IADDS at line: 41 with following arguments:
# Arg1: Stack@=42(int)
# Arg2: Stack@=6(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 42 with following arguments:
# Arg1: Stack@=48(int)
# Dest: LF@a=39(int)
# Executing instruction: IPUSHS at line: 43 with following arguments:
# Arg1: LF@a=48(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 44 with following arguments:
# Arg1: Const@=2(int)
# Dest: Stack@()
# Executing instruction: IMULTS at line: 45 with following arguments:
# Arg1: Stack@=48(int)
# Arg2: Stack@=2(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 46 with following arguments:
# Arg1: Stack@=96(int)
# Dest: LF@a=48(int)
# Executing instruction: IPUSHS at line: 47 with following arguments:
# Arg1: LF@a=96(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 48 with following arguments:
# Arg1: Stack@=96(int)
# Dest: LF@*tmp()
# Executing instruction: IWRITE at line: 49 with following arguments:
# Arg1: LF@*tmp=96(int)
# Executing instruction: IJUMP at line: 50 with following arguments:
# Executing instruction: ILABEL at line: 51 with following arguments:
# Executing instruction: IGROOT at line: 53 with following arguments:
# I am Groot at 53 (191).
# 
# STDOUT DIFF:
# 

# INTERPRETER STDIN: 
# 
#
# EXPECTED COMPILER EXIT CODE: 0
# CURRENT COMPILER EXIT CODE: 0
# EXPECTED INTERPRETER EXIT CODE: 0
# CURRENT INTERPRETER EXIT CODE: 0
# PRICE: 191 (62+129)
# GROOT: 191
# 
#   1: ' comments inside expressions
#   2: 
#   3: function foo() as integer
#   4: 	return 39
#   5: end function
#   6: 
#   7: scope
#   8: 	
#   9: 	dim a as integer
#  10: 	a = foo()
#  11: 	a = a + 3 + 6' comment
#  12: 	a = a /' '/ * /' '/ 2 ' + 8
#  13: 	print a;
#  14: 
#  15: end scope

########################################

# Generated code                                                                #     2/51
# IFJ                                                                           #     3/51
# xbenes49 xbolsh00 xpolan09                                                    #     4/51
# 2017                                                                          #     5/51
.IFJcode17                                                                      #     7/51
CREATEFRAME                                                                     #     8/51
PUSHFRAME                                                                       #     9/51
DEFVAR LF@*tmp                                                                  #    10/51
DEFVAR LF@*foo                                                                  #    11/51
DEFVAR LF@*bar                                                                  #    12/51
JUMP $main                                                                      #    13/51
# function foo                                                                  #    16/51
LABEL foo                                                                       #    17/51
PUSHFRAME                                                                       #    18/51
DEFVAR LF@*tmp                                                                  #    19/51
DEFVAR LF@*foo                                                                  #    20/51
DEFVAR LF@*bar                                                                  #    21/51
DEFVAR LF@*ret                                                                  #    22/51
PUSHS int@39                                                                    #    23/51
POPS LF@*ret                                                                    #    24/51
CLEARS                                                                          #    25/51
RETURN                                                                          #    26/51
LABEL $main                                                                     #    28/51
DEFVAR LF@a                                                                     #    29/51
PUSHS int@0                                                                     #    30/51
POPS LF@a                                                                       #    31/51
CREATEFRAME                                                                     #    32/51
CALL foo                                                                        #    33/51
POPFRAME                                                                        #    34/51
PUSHS TF@*ret                                                                   #    35/51
POPS LF@a                                                                       #    36/51
PUSHS LF@a                                                                      #    37/51
PUSHS int@3                                                                     #    38/51
ADDS                                                                            #    39/51
PUSHS int@6                                                                     #    40/51
ADDS                                                                            #    41/51
POPS LF@a                                                                       #    42/51
PUSHS LF@a                                                                      #    43/51
PUSHS int@2                                                                     #    44/51
MULS                                                                            #    45/51
POPS LF@a                                                                       #    46/51
PUSHS LF@a                                                                      #    47/51
POPS LF@*tmp                                                                    #    48/51
WRITE LF@*tmp                                                                   #    49/51
JUMP $end                                                                       #    50/51
LABEL $end                                                                      #    51/51

