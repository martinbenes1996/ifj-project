# 2017-12-04 00:15:00.130723
# SECTION: 04_expressions
# TEST: 07
# INFO: multiple operations with different priorities II
# REQUIRED EXTENSIONS: 
# ACTIVATED EXTENSIONS: BASE, UNARY
# STATE: SUCCESS
# 
# COMPILER STDERR:
# 
# INTERPRETER STDERR:
# Executing instruction: ICREATEFRAME at line: 8 with following arguments:
# Executing instruction: IPUSHFRAME at line: 9 with following arguments:
# Executing instruction: IDEFVAR at line: 10 with following arguments:
# Dest: LF@*tmp
# Executing instruction: IDEFVAR at line: 11 with following arguments:
# Dest: LF@*foo
# Executing instruction: IDEFVAR at line: 12 with following arguments:
# Dest: LF@*bar
# Executing instruction: IJUMP at line: 13 with following arguments:
# Executing instruction: ILABEL at line: 15 with following arguments:
# Executing instruction: IDEFVAR at line: 16 with following arguments:
# Dest: LF@a
# Executing instruction: IPUSHS at line: 17 with following arguments:
# Arg1: Const@=2(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 18 with following arguments:
# Arg1: Stack@=2(int)
# Dest: LF@a()
# Executing instruction: IDEFVAR at line: 19 with following arguments:
# Dest: LF@b
# Executing instruction: IPUSHS at line: 20 with following arguments:
# Arg1: Const@=16(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 21 with following arguments:
# Arg1: Stack@=16(int)
# Dest: LF@b()
# Executing instruction: IPUSHS at line: 22 with following arguments:
# Arg1: LF@b=16(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 23 with following arguments:
# Arg1: Stack@=16(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 24 with following arguments:
# Arg1: LF@a=2(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 25 with following arguments:
# Arg1: Stack@=2(int)
# Dest: Stack@()
# Executing instruction: IDIVS at line: 26 with following arguments:
# Arg1: Stack@=16(double)
# Arg2: Stack@=2(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 27 with following arguments:
# Arg1: LF@a=2(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 28 with following arguments:
# Arg1: Stack@=2(int)
# Dest: Stack@()
# Executing instruction: IADDS at line: 29 with following arguments:
# Arg1: Stack@=8(double)
# Arg2: Stack@=2(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 30 with following arguments:
# Arg1: LF@b=16(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 31 with following arguments:
# Arg1: Stack@=16(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 32 with following arguments:
# Arg1: Stack@=10(double)
# Arg2: Stack@=16(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 33 with following arguments:
# Arg1: Const@=100(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 34 with following arguments:
# Arg1: Stack@=100(int)
# Dest: Stack@()
# Executing instruction: IADDS at line: 35 with following arguments:
# Arg1: Stack@=-6(double)
# Arg2: Stack@=100(double)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 36 with following arguments:
# Arg1: Stack@=94(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 37 with following arguments:
# Arg1: Stack@=94(int)
# Dest: LF@a=2(int)
# Executing instruction: IPUSHS at line: 38 with following arguments:
# Arg1: LF@a=94(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 39 with following arguments:
# Arg1: Stack@=94(int)
# Dest: LF@*tmp()
# Executing instruction: IWRITE at line: 40 with following arguments:
# Arg1: LF@*tmp=94(int)
# Executing instruction: IJUMP at line: 41 with following arguments:
# Executing instruction: ILABEL at line: 42 with following arguments:
# Executing instruction: IGROOT at line: 44 with following arguments:
# I am Groot at 44 (182).
# 
# STDOUT DIFF:
# 

# INTERPRETER STDIN: 
# 
#
# EXPECTED COMPILER EXIT CODE: 0
# CURRENT COMPILER EXIT CODE: 0
# EXPECTED INTERPRETER EXIT CODE: 0
# CURRENT INTERPRETER EXIT CODE: 0
# PRICE: 182 (47+135)
# GROOT: 182
# 
#   1: ' multiple operations with different priorities II
#   2: scope
#   3:     dim a as integer = 2
#   4:     dim b as integer = 16
#   5:     a = b / a + a - b + 100
#   6:     print a;
#   7: end scope

########################################

# Generated code                                                                #     2/42
# IFJ                                                                           #     3/42
# xbenes49 xbolsh00 xpolan09                                                    #     4/42
# 2017                                                                          #     5/42
.IFJcode17                                                                      #     7/42
CREATEFRAME                                                                     #     8/42
PUSHFRAME                                                                       #     9/42
DEFVAR LF@*tmp                                                                  #    10/42
DEFVAR LF@*foo                                                                  #    11/42
DEFVAR LF@*bar                                                                  #    12/42
JUMP $main                                                                      #    13/42
LABEL $main                                                                     #    15/42
DEFVAR LF@a                                                                     #    16/42
PUSHS int@2                                                                     #    17/42
POPS LF@a                                                                       #    18/42
DEFVAR LF@b                                                                     #    19/42
PUSHS int@16                                                                    #    20/42
POPS LF@b                                                                       #    21/42
PUSHS LF@b                                                                      #    22/42
INT2FLOATS                                                                      #    23/42
PUSHS LF@a                                                                      #    24/42
INT2FLOATS                                                                      #    25/42
DIVS                                                                            #    26/42
PUSHS LF@a                                                                      #    27/42
INT2FLOATS                                                                      #    28/42
ADDS                                                                            #    29/42
PUSHS LF@b                                                                      #    30/42
INT2FLOATS                                                                      #    31/42
SUBS                                                                            #    32/42
PUSHS int@100                                                                   #    33/42
INT2FLOATS                                                                      #    34/42
ADDS                                                                            #    35/42
FLOAT2R2EINTS                                                                   #    36/42
POPS LF@a                                                                       #    37/42
PUSHS LF@a                                                                      #    38/42
POPS LF@*tmp                                                                    #    39/42
WRITE LF@*tmp                                                                   #    40/42
JUMP $end                                                                       #    41/42
LABEL $end                                                                      #    42/42

