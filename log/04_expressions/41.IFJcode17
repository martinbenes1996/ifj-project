# 2017-12-04 00:15:00.677538
# SECTION: 04_expressions
# TEST: 41
# INFO: maximum for C integer
# REQUIRED EXTENSIONS: 
# ACTIVATED EXTENSIONS: BASE, UNARY
# STATE: SUCCESS
# 
# COMPILER STDERR:
# 
# INTERPRETER STDERR:
# Executing instruction: ICREATEFRAME at line: 8 with following arguments:
# Executing instruction: IPUSHFRAME at line: 9 with following arguments:
# Executing instruction: IDEFVAR at line: 10 with following arguments:
# Dest: LF@*tmp
# Executing instruction: IDEFVAR at line: 11 with following arguments:
# Dest: LF@*foo
# Executing instruction: IDEFVAR at line: 12 with following arguments:
# Dest: LF@*bar
# Executing instruction: IJUMP at line: 13 with following arguments:
# Executing instruction: ILABEL at line: 15 with following arguments:
# Executing instruction: IDEFVAR at line: 16 with following arguments:
# Dest: LF@a
# Executing instruction: IPUSHS at line: 17 with following arguments:
# Arg1: Const@=2(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 18 with following arguments:
# Arg1: Const@=1000000000(int)
# Dest: Stack@()
# Executing instruction: IMULTS at line: 19 with following arguments:
# Arg1: Stack@=2(int)
# Arg2: Stack@=1000000000(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 20 with following arguments:
# Arg1: Const@=147(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 21 with following arguments:
# Arg1: Const@=1000000(int)
# Dest: Stack@()
# Executing instruction: IMULTS at line: 22 with following arguments:
# Arg1: Stack@=147(int)
# Arg2: Stack@=1000000(int)
# Dest: Stack@()
# Executing instruction: IADDS at line: 23 with following arguments:
# Arg1: Stack@=2000000000(int)
# Arg2: Stack@=147000000(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 24 with following arguments:
# Arg1: Const@=483(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 25 with following arguments:
# Arg1: Const@=1000(int)
# Dest: Stack@()
# Executing instruction: IMULTS at line: 26 with following arguments:
# Arg1: Stack@=483(int)
# Arg2: Stack@=1000(int)
# Dest: Stack@()
# Executing instruction: IADDS at line: 27 with following arguments:
# Arg1: Stack@=2147000000(int)
# Arg2: Stack@=483000(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 28 with following arguments:
# Arg1: Const@=647(int)
# Dest: Stack@()
# Executing instruction: IADDS at line: 29 with following arguments:
# Arg1: Stack@=2147483000(int)
# Arg2: Stack@=647(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 30 with following arguments:
# Arg1: Stack@=2147483647(int)
# Dest: LF@a()
# Executing instruction: IPUSHS at line: 31 with following arguments:
# Arg1: LF@a=2147483647(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 32 with following arguments:
# Arg1: Stack@=2147483647(int)
# Dest: LF@*tmp()
# Executing instruction: IWRITE at line: 33 with following arguments:
# Arg1: LF@*tmp=2147483647(int)
# Executing instruction: IJUMP at line: 34 with following arguments:
# Executing instruction: ILABEL at line: 35 with following arguments:
# Executing instruction: IGROOT at line: 37 with following arguments:
# I am Groot at 37 (139).
# 
# STDOUT DIFF:
# 

# INTERPRETER STDIN: 
# 
#
# EXPECTED COMPILER EXIT CODE: 0
# CURRENT COMPILER EXIT CODE: 0
# EXPECTED INTERPRETER EXIT CODE: 0
# CURRENT INTERPRETER EXIT CODE: 0
# PRICE: 139 (44+95)
# GROOT: 139
# 
#   1: ' maximum for C integer
#   2: 
#   3: scope
#   4:     dim a as integer = 2*1000000000+147*1000000+483*1000+647
#   5:     print a;
#   6: end scope

########################################

# Generated code                                                                #     2/35
# IFJ                                                                           #     3/35
# xbenes49 xbolsh00 xpolan09                                                    #     4/35
# 2017                                                                          #     5/35
.IFJcode17                                                                      #     7/35
CREATEFRAME                                                                     #     8/35
PUSHFRAME                                                                       #     9/35
DEFVAR LF@*tmp                                                                  #    10/35
DEFVAR LF@*foo                                                                  #    11/35
DEFVAR LF@*bar                                                                  #    12/35
JUMP $main                                                                      #    13/35
LABEL $main                                                                     #    15/35
DEFVAR LF@a                                                                     #    16/35
PUSHS int@2                                                                     #    17/35
PUSHS int@1000000000                                                            #    18/35
MULS                                                                            #    19/35
PUSHS int@147                                                                   #    20/35
PUSHS int@1000000                                                               #    21/35
MULS                                                                            #    22/35
ADDS                                                                            #    23/35
PUSHS int@483                                                                   #    24/35
PUSHS int@1000                                                                  #    25/35
MULS                                                                            #    26/35
ADDS                                                                            #    27/35
PUSHS int@647                                                                   #    28/35
ADDS                                                                            #    29/35
POPS LF@a                                                                       #    30/35
PUSHS LF@a                                                                      #    31/35
POPS LF@*tmp                                                                    #    32/35
WRITE LF@*tmp                                                                   #    33/35
JUMP $end                                                                       #    34/35
LABEL $end                                                                      #    35/35

